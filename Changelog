Changelog

v1.40 (mint)
2010-03-18 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE] Creating an abstract DumpNode class to be used during debug.
* [MIRAGE/Java] java.freecc: created a new method hasDuplicateMethods() in 
ClassOrInterfaceBody class that returns true if a duplicated method is found
* [MODEL] Interface: new class modeling a j2ee interface. It extends BasicObject
that it will be also the abstract class for Class object
* [MIRAGE/Java] Java.freecc: now ClassDeclaration, InterfaceDeclaration are 
generated as regular java classes
* [MIRAGE/Java] JavaCollector: some hacks around obtained ASTs

2010-02-08 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Java] JavaStat. Created a new class extending core Stat to be
specific for a Java source file.

* [MIRAGE] Identify. Created an empty constructor to be used when invoking 
directly identify() method.
* [TOOLS] new JavaDump tool. This tool can be used to dump information about a
single java file actually parsed.

2010-02-03 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Jsp] added information about jsp filename and line number when 
adding an html entry point
* [TOOLS] new EntryPointLocator tool. Used to print out web application 
detected entry points.
* some works over application skeleton to retrieve entry points. Used in 
EntryPointLocator tool.
2010-02-02 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE] Identify: implemented the support to detect generic kind of 
applications
* [CORE] Added a GenericApp class that will act as skelecton for language 
specific applications. This is useful when you have to review just a bunch of
files, not a complete application, so configuration file won't be included.
Actually, this is the Orizon pre 1.30 behaviour.

2010-02-01 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Java] Implenting a Java Collector class to handle ASTs

2010-01-28 Paolo Perego <thesp0nge@owasp.org>
* [CORE] Created a Stats class to be used as Stat class collector to be used 
within a web application.

2010-01-28 Paolo Perego <thesp0nge@owasp.org>
* [TOOLS] New classes Detect, J2EEDump
* [CORE] New class Stat that will be added to Collector and to SourceFile 
classes
* [MIRAGE] Identify. New method toString().
2010-01-26 Paolo Perego <thesp0nge@owasp.org>
* new package: org.owasp.orizon.tools. The tools package will contain some 
utility binaries deployed to show off how to use Orizon engine.
The tasks they accomplish are very basic and it can be a good idea to realize
a very basic tool instead of having the user do the same things with OSH.

v1.30 (mint)
2010-01-26 Paolo Perego <thesp0nge@owasp.org>
* RELEASE: v1.30.
* build.xml: now the "dest" target builds also the orizon archives to be used 
as download 

2010-01-25 Paolo Perego <thesp0nge@owasp.org>
* [CORE]: new Orizon class introduced to act as manager to all command line
supplied arguments passed to the framework.
* [MIRAGE/Java]: new Filter && Filters classes pair to map web.xml filter 
configuration
* Servlet && Servlets moved from CORE to Mirage/Java

2010-01-22 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Jsp]: JspCollector: adding support for <A> HTML tag
* log4j configuration file will be stored in a conf/log4j.conf file and the 
launcher script will initialize the log4jconfname system property. So the code
doesn't contain any hardcoded path and the user have just to change the 
-Dlog4jconfname flag to use a custom init file for log4j
* [MIRAGE/Java] working in web.xml comprehension. A Servlet object has
been created to match the servlets used from the application
* [LOG] initial log facilities write

2010-01-20 Paolo Perego <thesp0nge@owasp.org>
* [CORE] WebApp: a vector of string containing file names that Orizon wasn't 
able to parse is added
* [MIRAGE/Java] J2eeApp: constructor won't raise OrizonParseException anymore.
The reason is that if a parse action fails, Orizon must go over trying to 
parse other files.
* build.xml up and running again
2010-01-19 Paolo Perego <thesp0nge@owasp.org>
* [MODEL] MatchingPoint: new class that describe a match between an entry 
point and an exit point. By a match I mean a value that an attacker can 
control and that it is used in the HTML output of the web app.

2010-01-17 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Jsp] JspCollector.model(): some basic XSS detection code is up and 
running.
* [MODEL] ExitPoint, JspExitPoint: classes used to describe an exit point for
a page or a business logic

2010-01-15 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Jsp] JspCollector: some hacks to model() method in order to collect
entry points 

2010-01-05 Paolo Perego <thesp0nge@owasp.org>
* [MODEL] FormEntryPoint: this is an html form that can be used by an attacker as
entry point.
* [MISC] Attribute, AttributeList: two new classes to manage attributes 
represented from string pairs and lists of attributes to be used in HTML
specific classes
* [MODEL] HtmlEntryPoint, InputEntryPoint: two classes that models an attacking
entry point for a dynamic web page.
* [MIRAGE/Jsp]: JspCollector: retrieving INPUT field from jsp HTML code
* [MODEL]: New package reflecting application model specific objects
*Ê[MISC]: New package used as container for all miscellaneous classes

2009-12-30 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Jsp]: new JspSourceFile and JspCollector classes
* [MIRAGE/Jsp]: added back from Owasp Orizon 1.20 source code with no change
(since no changes were required but the OUTPUT_DIRECTORY :-))
* [MIRAGE/Java]: WebXmlConfFile is able to retrieve welcome-page and 
servlet-classes information wrom web.xml. These will be used by J2eeApp into
model() method to start modeling

2009-12-29 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE/Java]: new J2eeApp class that extends WebApp modeling a j2ee web
application.
* [MIRAGE/Java]: new JavaSourceFile, JspSourceFile, WebXmlConfFile that 
models j2ee app file dependent.

2009-12-28 Paolo Perego <thesp0nge@owasp.org>
* [CORE] WebApp: abstract class modeling a web application.
*Ê[CORE] PlainFile, SourceFile, ConfigFile: new classes modeling files contained
in a webapp root.
 
2009-12-22 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE] Identify.java: implementing web app identify routine
* [UTIL] BooleanUtils.java: a new class containing some common ground boolean 
based tests.
2009-12-09 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE] Identify.java: modeling will start now with an identify
phase that will drive all the modeling issues. In example, orizon 
will be able to identify:
	+ classic j2ee applications (jsp + business logic)
	+ RESTful applications
	+ .NET applications
	+ php applications
	+ Ruby on Rails applications
	+ grails applications
	+ non web application will be threated independent from the 
	language used
* Introduced two packages: utils - for all common utilities routines and 
exceptions for the custom exceptions raised within the engine
* Introduced test cases directory skeleton

2009-11-27 Paolo Perego <thesp0nge@owasp.org>
* [MIRAGE] putting the package skeleton pack for the Mirage engine

2009-11-27 Paolo Perego <thesp0nge@owasp.org>
* We moved to google code and the version number is initialized to 1.30 and it 
will be used this number accordingly to project roadmap.

v1.20
2009-08-26 Paolo Perego <thesp0nge@owasp.org>
* SessionInfo.java: added support for JSP crawl
* Librarian.java: added support for JSP crawl recipe
* Modeler.java: now each collector is prompted for auxiliary fault list
* Collector.java: new public abstract boolean hasAuxFaults()
* Collector.java: new public abstract Vector<Reportable> getAuxFaults()
* JspCollector.java: inspect(), we're experimenting a new way of inspecting
the AST. We retrieve the whole token list, and for each token if it's 
interesting (the start of a comment, ...) we take the parent node.
It's too hard to work in a Node based way... working this way we don't have to
take care about deeping

v1.19
2009-08-24 Paolo Perego <thesp0nge@owasp.org>
* added executeUpdate() to Java crawling dangerous keyword list
* JavaCollector.java: understandMethods() added support for detecting empty
catches.
* JavaCollector.java: support for auxiliary faults given from empty catches... 
this is supported by now only for Java. Now empty catches in Java sources are 
reported as medium vulnerabilties.
2009-08-19 Paolo Perego <thesp0nge@owasp.org>
* JspCollector.java: inspect() first implementation
2009-08-17 Paolo Perego <thesp0nge@owasp.org>
* SessionInfo.java: crawl() changing messages for 'stat' command
2009-08-14 Paolo Perego <thesp0nge@owasp.org>
* Modeler.java: list() adding a check if the source has null variables or 
identifiers
* Session.java: supports SessionInfo traceing during initialization
* SessionInfo.java extends Trackable
* Modeler.java: after discarding a source, it must filled up with the error 
string coming from the collector
* all collectors: during parse() they *MUST* call setError in exception handling
block
* Collector.java: adding a setter/getter method pair to handle error string 
when parsing a file
* Source.java: adding the error description when the source has been discarded
2009-08-12 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: when user issues "mirage" command, the engine is first retrieved 
from SkyLine, then created as new if non existant
* Modeler.java: add a show() method with no params that shows errors occured 
during modeling
* Mirage.java: add a "show errors" command to show what has gone wrong during 
modeling
* Mirage.java: cleaning up for unused commands
* Osh.java: changing set mirage to a generic set trace, notrace so can 
be used also by other engines, and the "mirage" command can be called again
* Osh.java: setting up abbreviation for shell commands
* Osh.java: in the shell() main loop, an additional out.flush() call is done to
prevent garbage chars to be consumed
* Osh.java: putting "set mirage notrace" back to work...
2009-07-24 Paolo Perego <thesp0nge@owasp.org>
* Variable.java: deprecated
* JavaCollector.java: gathering declared variables...
* Trackable.java: a timestamp is added to traces...
2009-07-21 Paolo Perego <thesp0nge@owasp.org>
* Twilight.java: using CommonUI
* CommonUI.java: adding a setProgress() with a string parameter to be used as
caption.
* Dusk.java: using CommonUI (commented... too much noise, but you can find in the
process() method.
* adding ConsoleReader object to SessionInfo to better handling UI
2009-07-20 Paolo Perego <thesp0nge@owasp.org>
* moving to 1.19rc2
* SessionInfo.java: if 0 issues were found during crawl, no more message is
appended to 'stat' output. A lot of noise when checking a lot of files
* SessionInfo.java: a more descriptive message is used when Dusk doesn't find 
rules for a certain language.
* BUG 20090720.1: "OPEN" doesn't accept relative paths. Fixed, now you can 
open ../somedir.
2009-07-17 Paolo Perego <thesp0nge@owasp.org>
* BUG 20090717.2: "MODEL" doesn't check if the application has been opened causing
an exception.
* BUG 20090717.1: "OPEN" comment silently fails without error messages.
2009-07-14 Paolo Perego <thesp0nge@owasp.org>
* Report.java: added stats info into the report
* Source.java, Collector.java: now contains a protected Stats object.
A collector will store infos internally and then Modeler.java will load infos to
source object.
Also Reportable.java, Engine.java, SessionInfo.java need to have a Stats object...
* Mirage.java, JavaCollector.java: working over statistics gathering (number of 
lines of comment)
2009-07-13 Paolo Perego <thesp0nge@owasp.org>
* moving to 1.19rc1
* Osh.java: now Orizon has autocomplete :-)
* ConsoleReader object created in Osh.java is passed among Orizon objects. 
This is needed to avoid echo errors after progress bar visualization
* Osh.java: exec() was missing LexicalException catching
2009-07-02 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: added a VERSION command that prints out only the version number
2009-06-30 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: modifying HELP command. It acts like "svn" command line tool. Issuing
help without parameter all the available commands will be displayed. Istead 
specifying a command name as help parameter, a more detailed message will be 
showed for that command.
2009-06-16 Paolo Perego <thesp0nge@owasp.org>
* org.owasp.orizon.mirage.jsp: added support for JSP files.
2009-06-05 Paolo Perego <thesp0nge@owasp.org>
* Session.java: open() now the folder object is recreated every time an 
application has been opened. This makes sense in a batch execution
* Osh.java: added SET TEE command. It makes sense only if used before a RUN 
command, otherwise is silently ignored. It tells Orizon to tee all reports also 
in a single text file called "orizon-run-$TIMESTAMP.txt". 
This is to prevent errors while setting the report filename in a batch 
execution.
2009-06-04 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: added the RUN command. Now you can edit a text file containing
a bunch of osh commands and ask Orizon to execute them as a batch.
* Skyline.java: add the number of bytes written in the report.
* Modeler.java, Mirage.java, Session.java, Skyline.java, Osh.java: add a visual 
information if the model is not for 100% of input source files.
* BUG 20090604.1: with some commands scan session is renewed. This should not 
occur. Fixed for list and search commands

2009-06-03 Paolo Perego <thesp0nge@owasp.org>
* Osh.java and friend: Adding a SEARCH command that search methods call or 
variables
* Identifier.java form org.owasp.orizon.mirage has been refactored to Call.java
* OldMethod.java, OldClass.java, Param.java, Idenfier.java from 
org.owasp.orizon.code deleted since unused.
* Collector.java: added a getVariables() method
* mirage.freecc, Mirage.java, Modeler.java: added support for "list" command  
* osh.freecc, Osh.java, Skyline.java, Session.java: added "list" command to 
give ability to list variables, methods, classes, ...
2009-05-29 Paolo Perego <thesp0nge@owasp.org>
* osh.freecc, Osh.java: added "tornado" command
* Tornado.java: added a "runall" command that run every loaded plugin
* Tornado.java: added a "run" command that take a class name previously 
loaded and it calls
* Tornado.java: added a "ls" command to list loaded plugins
* Added DummyPlugin abstract class and a PluginDemo just to show 
the basics of writing Orizon plugins
* Plugin.java is now an abstract class, not an interface anymore.
* Plugin.java: added fields describing the engine this plugin is 
intended for.

2009-05-28 Paolo Perego <thesp0nge@owasp.org>
* Library.java: changed prompt
* build.xml: added Tornado in the engines build system
* org.owasp.orizon.plugin package renamed to org.owasp.orizon.tornado
* org.owasp.orizon.plugin will have its own engine: Tornado.
* PluginCheck.java: deleted and all its references in Recipe.java.
* O.java: changed modifier for isCompatible() to static

v1.18
2009-05-24 Paolo Perego <thesp0nge@owasp.org>
* Engine.java: added properties inherited from SessionInfos as field with 
setter and getter
* Reportable.java: added field init values into class contructor
* PlainFormatter.java, Reportable.java, Cons.java, SkyLine.java,
SessionInfo.java: now a small snippet of code is printed to show the 
vulnerability found during crawl (of course, it will be available when 
full static analysis will be available).
2009-05-21 Paolo Perego <thesp0nge@owasp.org>
* SessionInfo.java, Session.java: add a print over standard output about
elapsed time for twilight and how many issues were found
* BUG 20090521.1: if model command has not been issued and you ask for crawling
a null pointer exception will arise.
* BUG 20090521.2: scan time has unexpected value when something went wrong in
crawl method.
(thanks Gufo <ilgufo@gmail.com> for spotting BUGs 20090521.1 and 20090521.2)
2009-05-18 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: introduced console report format that override writing to disk 
printing to System.out
* Osh.java: introduced set report_name filename that tells orizon to write
findinds in filename
* Osh.java: introduced XML as report output format
* Osh.java: introduced the possibility to set per engine properties. Just for 
mirage by now. Supported properties now are only trace property that puts
mirage in trace mode. So issuing set mirage trace from osh, actually it puts
mirage in trace mode. The command set mirage notrace disable it.
* Collector.java: more trace() instead of lame println()...
* Modeler.java: extend Trackable clause is added. Now if Mirage 
is put in trace mode, it propagates this information for modeler and collectors.
On the other hand, if Mirage is not in trace mode, all debug messages will be 
discarded. Too much noise for regular users... 
* Mirage.java: moved setTrace() calls for Mirage from the Mirage constructor it 
self (lame hardcoding) to Session class, when Mirage has been created.
2009-05-14 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: added SUGGEST command. You can use this command to have suggestion 
on which is the next command you have likely to issue
* BUG 20090514.1: if no identiers are found while assessing C code than a null
pointer exception arises.
2009-05-12 Paolo Perego <thesp0nge@owasp.org>
* BUG 20090512.1: if open is not the first command, a NullPointerException is 
risen due to properties that are null.
2009-04-26 Paolo Perego <thesp0nge@owasp.org>
* CCollector.java: improved identifier extracion for crawling
* SessionInfo.java: added a message as STAT output after crawling
2009-04-21 Paolo Perego <thesp0nge@owasp.org>
* build.xml: new Jar archive for orizon generated javadoc
2009-04-20 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: added the capability to specify the report format. You can recall
this with: SET report_format format name
* Osh.java: added the capability to set a directory as root for ORL security 
library. You can recall this with: SET orl_root dirname
* Osh.java: added the capability to say Orizon not to put info using stdout, but
storing in an internal string for further usage instead. This is useful when 
embedding orizon in a web application. You can recall this with: 
SET store_output
* Removed all old crawler and translator classes
* Switched from JDK6 to JDK5 in order to give people freedom to write UI stuff
using SWT.

2009-03-31 Paolo Perego <thesp0nge@owasp.org>
* Osh.java: added the capability to pass a filename as argument containing 
commands

2009-03-30 Paolo Perego <thesp0nge@owasp.org>
* org.owasp.orizon.mirage.java: new! Java grammar is the one distributed with 
FreeCC (http://code.google.com/p/freecc/) without NO changes
* Modeler.java: refactoring. This class won't be abstract anymore, it will be
a regular class since we adopted the formalism that all languages shares the
same modeler meanwhile they have specialized Collectors...
* PhpModeler.java: deleted
* Engine.java, Collector.java: now these classes extend Trackable
* Trackable.java: new class with a boolean flag that tells if the object is in 
trace mode or  not. If engine is in trace mode, all exceptions will be written 
in a text file. This is due to reduce the amount of errors/warnings that are 
more useful during development rather than for regular users. Trackable is 
extended by Engine abstract class and by the Collector by now

v1.17
2009-03-26 Paolo Perego <thesp0nge@owasp.org>
* v1.17 release
* osh.java: added SET command. Available options are QUIET that tells orizon not 
to bother with warnings. 