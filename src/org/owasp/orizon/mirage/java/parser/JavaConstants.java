/* Generated by: FreeCC 0.9.3. Do not edit. JavaConstants.java */
package org.owasp.orizon.mirage.java.parser;

/**
 * Token literal values and constants.
 */
public interface JavaConstants {
    int EOF=0;
    // End of file
    int WHITESPACE=1;
    int SINGLE_LINE_COMMENT=5;
    int FORMAL_COMMENT=6;
    int MULTI_LINE_COMMENT=7;
    int ABSTRACT=9;
    int ASSERT=10;
    int BOOLEAN=11;
    int BREAK=12;
    int BYTE=13;
    int CASE=14;
    int CATCH=15;
    int CHAR=16;
    int CLASS=17;
    int CONST=18;
    int CONTINUE=19;
    int _DEFAULT=20;
    int DO=21;
    int DOUBLE=22;
    int ELSE=23;
    int ENUM=24;
    int EXTENDS=25;
    int FALSE=26;
    int FINAL=27;
    int FINALLY=28;
    int FLOAT=29;
    int FOR=30;
    int GOTO=31;
    int IF=32;
    int IMPLEMENTS=33;
    int IMPORT=34;
    int INSTANCEOF=35;
    int INT=36;
    int INTERFACE=37;
    int LONG=38;
    int NATIVE=39;
    int NEW=40;
    int NULL=41;
    int PACKAGE=42;
    int PRIVATE=43;
    int PROTECTED=44;
    int PUBLIC=45;
    int RETURN=46;
    int SHORT=47;
    int STATIC=48;
    int STRICTFP=49;
    int SUPER=50;
    int SWITCH=51;
    int SYNCHRONIZED=52;
    int THIS=53;
    int THROW=54;
    int THROWS=55;
    int TRANSIENT=56;
    int TRUE=57;
    int TRY=58;
    int VOID=59;
    int VOLATILE=60;
    int WHILE=61;
    int INTEGER_LITERAL=62;
    int DECIMAL_LITERAL=63;
    int HEX_LITERAL=64;
    int OCTAL_LITERAL=65;
    int FLOATING_POINT_LITERAL=66;
    int DECIMAL_FLOATING_POINT_LITERAL=67;
    int DECIMAL_EXPONENT=68;
    int HEXADECIMAL_FLOATING_POINT_LITERAL=69;
    int HEXADECIMAL_EXPONENT=70;
    int CHARACTER_LITERAL=71;
    int STRING_LITERAL=72;
    int LPAREN=73;
    int RPAREN=74;
    int LBRACE=75;
    int RBRACE=76;
    int LBRACKET=77;
    int RBRACKET=78;
    int SEMICOLON=79;
    int COMMA=80;
    int DOT=81;
    int ASSIGN=82;
    int GT=83;
    int LT=84;
    int BANG=85;
    int TILDE=86;
    int HOOK=87;
    int COLON=88;
    int EQ=89;
    int LE=90;
    int GE=91;
    int NE=92;
    int SC_OR=93;
    int SC_AND=94;
    int INCR=95;
    int DECR=96;
    int PLUS=97;
    int MINUS=98;
    int STAR=99;
    int SLASH=100;
    int BIT_AND=101;
    int BIT_OR=102;
    int XOR=103;
    int REM=104;
    int LSHIFT=105;
    int RSIGNEDSHIFT=106;
    int RUNSIGNEDSHIFT=107;
    int PLUSASSIGN=108;
    int MINUSASSIGN=109;
    int STARASSIGN=110;
    int SLASHASSIGN=111;
    int ANDASSIGN=112;
    int ORASSIGN=113;
    int XORASSIGN=114;
    int REMASSIGN=115;
    int LSHIFTASSIGN=116;
    int RSIGNEDSHIFTASSIGN=117;
    int RUNSIGNEDSHIFTASSIGN=118;
    int IDENTIFIER=121;
    int LETTER=122;
    int PART_LETTER=123;
    int COMPILATIONUNIT=118;
    int PACKAGEDECLARATION=119;
    int IMPORTDECLARATION=120;
    int MODIFIERS=121;
    int TYPEDECLARATION=122;
    int CLASSDECLARATION=123;
    int INTERFACEDECLARATION=124;
    int EXTENDSLIST=125;
    int IMPLEMENTSLIST=126;
    int ENUMBODY=127;
    int ENUMCONSTANT=128;
    int TYPEPARAMETERLIST=129;
    int TYPEPARAMETER=130;
    int TYPEBOUND=131;
    int CLASSORINTERFACEBODY=132;
    int CLASSORINTERFACEBODYDECLARATION=133;
    int FIELDDECLARATION=134;
    int VARIABLEDECLARATOR=135;
    int VARIABLEDECLARATORID=136;
    int VARIABLEINITIALIZER=137;
    int ARRAYINITIALIZER=138;
    int METHODDECLARATION=139;
    int FORMALPARAMS=140;
    int FORMALPARAMETER=141;
    int CONSTRUCTORDECLARATION=142;
    int EXPLICITCONSTRUCTORINVOCATION=143;
    int INITIALIZER=144;
    int TYPE=145;
    int REFERENCETYPE=146;
    int OBJECTTYPE=147;
    int TYPEARGUMENTS=148;
    int TYPEARGUMENT=149;
    int WILDCARDBOUNDS=150;
    int PRIMITIVEARRAYTYPE=151;
    int RETURNTYPE=152;
    int NAME=153;
    int THROWSLIST=154;
    int EXPRESSION=155;
    int ASSIGNMENTEXPRESSION=156;
    int TERNARYEXPRESSION=157;
    int CONDITIONALOREXPRESSION=158;
    int CONDITIONALANDEXPRESSION=159;
    int INCLUSIVEOREXPRESSION=160;
    int EXCLUSIVEOREXPRESSION=161;
    int ANDEXPRESSION=162;
    int EQUALITYEXPRESSION=163;
    int INSTANCEOFEXPRESSION=164;
    int RELATIONALEXPRESSION=165;
    int SHIFTEXPRESSION=166;
    int ADDITIVEEXPRESSION=167;
    int MULTIPLICATIVEEXPRESSION=168;
    int UNARYEXPRESSION=169;
    int PREINCREMENTEXPRESSION=170;
    int PREDECREMENTEXPRESSION=171;
    int UNARYEXPRESSIONNOTPLUSMINUS=172;
    int CASTLOOKAHEAD=173;
    int POSTFIXEXPRESSION=174;
    int CASTEXPRESSION=175;
    int PRIMARYEXPRESSION=176;
    int MEMBERSELECTOR=177;
    int PRIMARYPREFIX=178;
    int PRIMARYSUFFIX=179;
    int INTEGERLITERAL=180;
    int INVOCATIONARGS=181;
    int ALLOCATIONEXPRESSION=182;
    int ARRAYDIMSANDINITS=183;
    int ASSERTSTATEMENT=184;
    int LABELEDSTATEMENT=185;
    int CODEBLOCK=186;
    int LOCALVARIABLEDECLARATION=187;
    int EMPTYSTATEMENT=188;
    int STATEMENTEXPRESSION=189;
    int SWITCHSTATEMENT=190;
    int SWITCHLABEL=191;
    int IFSTATEMENT=192;
    int WHILESTATEMENT=193;
    int DOSTATEMENT=194;
    int FORSTATEMENT=195;
    int FORINIT=196;
    int STATEMENTEXPRESSIONLIST=197;
    int FORUPDATE=198;
    int BREAKSTATEMENT=199;
    int CONTINUESTATEMENT=200;
    int RETURNSTATEMENT=201;
    int THROWSTATEMENT=202;
    int SYNCHRONIZEDSTATEMENT=203;
    int TRYSTATEMENT=204;
    int CATCHBLOCK=205;
    int FINALLYBLOCK=206;
    int ANNOTATION=207;
    int MEMBERVALUEPAIRS=208;
    int MEMBERVALUEPAIR=209;
    int MEMBERVALUE=210;
    int MEMBERVALUEARRAYINITIALIZER=211;
    int ANNOTATIONTYPEBODY=212;
    int ANNOTATIONTYPEMEMBERDECLARATION=213;
    int DEFAULTVALUE=214;
    /**
   * Lexical States
   */
    int DEFAULT=0;
    int IN_SINGLE_LINE_COMMENT=1;
    int IN_FORMAL_COMMENT=2;
    int IN_MULTI_LINE_COMMENT=3;
    String[] tokenImage={"<EOF>","<WHITESPACE>","\"//\"","<3>","\"/*\"","<SINGLE_LINE_COMMENT>","\"*/\"","\"*/\"","<8>","\"abstract\"","\"assert\"","\"boolean\"","\"break\"","\"byte\"","\"case\"","\"catch\"","\"char\"","\"class\"","\"const\"","\"continue\"","\"default\"","\"do\"","\"double\"","\"else\"","\"enum\"","\"extends\"","\"false\"","\"final\"","\"finally\"","\"float\"","\"for\"","\"goto\"","\"if\"","\"implements\"","\"import\"","\"instanceof\"","\"int\"","\"interface\"","\"long\"","\"native\"","\"new\"","\"null\"","\"package\"","\"private\"","\"protected\"","\"public\"","\"return\"","\"short\"","\"static\"","\"strictfp\"","\"super\"","\"switch\"","\"synchronized\"","\"this\"","\"throw\"","\"throws\"","\"transient\"","\"true\"","\"try\"","\"void\"","\"volatile\"","\"while\"","<INTEGER_LITERAL>","<DECIMAL_LITERAL>","<HEX_LITERAL>","<OCTAL_LITERAL>","<FLOATING_POINT_LITERAL>","<DECIMAL_FLOATING_POINT_LITERAL>","<DECIMAL_EXPONENT>","<HEXADECIMAL_FLOATING_POINT_LITERAL>","<HEXADECIMAL_EXPONENT>","<CHARACTER_LITERAL>","<STRING_LITERAL>","\"(\"","\")\"","\"{\"","\"}\"","\"[\"","\"]\"","\";\"","\",\"","\".\"","\"=\"","\">\"","\"<\"","\"!\"","\"~\"","\"?\"","\":\"","\"==\"","\"<=\"","\">=\"","\"!=\"","\"||\"","\"&&\"","\"++\"","\"--\"","\"+\"","\"-\"","\"*\"","\"/\"","\"&\"","\"|\"","\"^\"","\"%\"","\"<<\"","\">>\"","\">>>\"","\"+=\"","\"-=\"","\"*=\"","\"/=\"","\"&=\"","\"|=\"","\"^=\"","\"%=\"","\"<<=\"","\">>=\"","\">>>=\"","\"...\"","\"@\"","<IDENTIFIER>","<LETTER>","<PART_LETTER>"};
    String[] nodeNames={"EOF","WHITESPACE","SINGLE_LINE_COMMENT","FORMAL_COMMENT","MULTI_LINE_COMMENT","ABSTRACT","ASSERT","BOOLEAN","BREAK","BYTE","CASE","CATCH","CHAR","CLASS","CONST","CONTINUE","_DEFAULT","DO","DOUBLE","ELSE","ENUM","EXTENDS","FALSE","FINAL","FINALLY","FLOAT","FOR","GOTO","IF","IMPLEMENTS","IMPORT","INSTANCEOF","INT","INTERFACE","LONG","NATIVE","NEW","NULL","PACKAGE","PRIVATE","PROTECTED","PUBLIC","RETURN","SHORT","STATIC","STRICTFP","SUPER","SWITCH","SYNCHRONIZED","THIS","THROW","THROWS","TRANSIENT","TRUE","TRY","VOID","VOLATILE","WHILE","INTEGER_LITERAL","DECIMAL_LITERAL","HEX_LITERAL","OCTAL_LITERAL","FLOATING_POINT_LITERAL","DECIMAL_FLOATING_POINT_LITERAL","DECIMAL_EXPONENT","HEXADECIMAL_FLOATING_POINT_LITERAL","HEXADECIMAL_EXPONENT","CHARACTER_LITERAL","STRING_LITERAL","LPAREN","RPAREN","LBRACE","RBRACE","LBRACKET","RBRACKET","SEMICOLON","COMMA","DOT","ASSIGN","GT","LT","BANG","TILDE","HOOK","COLON","EQ","LE","GE","NE","SC_OR","SC_AND","INCR","DECR","PLUS","MINUS","STAR","SLASH","BIT_AND","BIT_OR","XOR","REM","LSHIFT","RSIGNEDSHIFT","RUNSIGNEDSHIFT","PLUSASSIGN","MINUSASSIGN","STARASSIGN","SLASHASSIGN","ANDASSIGN","ORASSIGN","XORASSIGN","REMASSIGN","LSHIFTASSIGN","RSIGNEDSHIFTASSIGN","RUNSIGNEDSHIFTASSIGN","IDENTIFIER","LETTER","PART_LETTER","CompilationUnit","PackageDeclaration","ImportDeclaration","Modifiers","TypeDeclaration","ClassDeclaration","InterfaceDeclaration","ExtendsList","ImplementsList","EnumBody","EnumConstant","TypeParameterList","TypeParameter","TypeBound","ClassOrInterfaceBody","ClassOrInterfaceBodyDeclaration","FieldDeclaration","VariableDeclarator","VariableDeclaratorId","VariableInitializer","ArrayInitializer","MethodDeclaration","FormalParams","FormalParameter","ConstructorDeclaration","ExplicitConstructorInvocation","Initializer","Type","ReferenceType","ObjectType","TypeArguments","TypeArgument","WildcardBounds","PrimitiveArrayType","ReturnType","Name","ThrowsList","Expression","AssignmentExpression","TernaryExpression","ConditionalOrExpression","ConditionalAndExpression","InclusiveOrExpression","ExclusiveOrExpression","AndExpression","EqualityExpression","InstanceOfExpression","RelationalExpression","ShiftExpression","AdditiveExpression","MultiplicativeExpression","UnaryExpression","PreIncrementExpression","PreDecrementExpression","UnaryExpressionNotPlusMinus","CastLookahead","PostfixExpression","CastExpression","PrimaryExpression","MemberSelector","PrimaryPrefix","PrimarySuffix","IntegerLiteral","InvocationArgs","AllocationExpression","ArrayDimsAndInits","AssertStatement","LabeledStatement","CodeBlock","LocalVariableDeclaration","EmptyStatement","StatementExpression","SwitchStatement","SwitchLabel","IfStatement","WhileStatement","DoStatement","ForStatement","ForInit","StatementExpressionList","ForUpdate","BreakStatement","ContinueStatement","ReturnStatement","ThrowStatement","SynchronizedStatement","TryStatement","CatchBlock","FinallyBlock","Annotation","MemberValuePairs","MemberValuePair","MemberValue","MemberValueArrayInitializer","AnnotationTypeBody","AnnotationTypeMemberDeclaration","DefaultValue",};
}
