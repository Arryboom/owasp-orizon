/* Generated by: FreeCC 0.9.3. Do not edit. ClassOrInterfaceBody.java */
package org.owasp.orizon.mirage.java.parser;

import java.util.*;
public class ClassOrInterfaceBody extends BaseNode {
    private String dupMethod;
    public String getAsString() {
        return getInnerText();
    }

    public void prepend(List<ClassOrInterfaceBodyDeclaration>elements) {
        ListIterator<Node>iterator=iterator();
        Node n=null;
        while (iterator.hasNext()) {
            n=iterator.next();
            if (n.getId()==LBRACE) {
                break;
            }
        }
        for(ClassOrInterfaceBodyDeclaration elem : elements) {
            iterator.add(elem);
            iterator.next();
        }
    }

    public boolean hasDuplicateMethods() {
        Set<String>sigs=new HashSet<String>();
        ListIterator<Node>decls=iterator();
        while (decls.hasNext()) {
            Node n=decls.next();
            if (n instanceof ClassOrInterfaceBodyDeclaration) {
                ClassOrInterfaceBodyDeclaration decl=(ClassOrInterfaceBodyDeclaration) n;
                String sig=decl.getFullNameSignatureIfMethod();
                if (sig!=null) {
                    if (sigs.contains(sig)) {
                        dupMethod=sig;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public String getDuplicatedMethodName() {
        return dupMethod;
    }

    public void removeDuplicateMethods() {
        Set<String>sigs=new HashSet<String>();
        ListIterator<Node>decls=iterator();
        while (decls.hasNext()) {
            Node n=decls.next();
            if (n instanceof ClassOrInterfaceBodyDeclaration) {
                ClassOrInterfaceBodyDeclaration decl=(ClassOrInterfaceBodyDeclaration) n;
                String sig=decl.getFullNameSignatureIfMethod();
                if (sig!=null) {
                    if (sigs.contains(sig)) {
                        decls.remove();
                    }
                    else {
                        sigs.add(sig);
                    }
                }
            }
        }
    }

    public ClassOrInterfaceBody(int id) {
        super(id);
    }

    public ClassOrInterfaceBody() {
        super(JavaConstants.CLASSORINTERFACEBODY);
    }

}
