/* Generated by: FreeCC 0.9.3. JspParser.java */
package org.owasp.orizon.mirage.jsp.parser;

import org.owasp.orizon.exceptions.OrizonJspStartAndEndTagMismatchException;
@SuppressWarnings("unused")
public class JspParser implements JspConstants {
    /**
	 * Return the contents of a quote.
	 * @param quote String - starting and ending with " or '
	 * @return String a substring of quote: quote without the first and list
	 * character.
	 */
    private static String quoteContent(String quote) {
        return quote.substring(1,quote.length()-1);
    }

    /**
	 * Return the contents of a EL expression or a Value Binding expression.
	 * @param expression String - starting with ${ or #{ and ending with }
	 * @return String a substring of expression: expression without the first two and list
	 * characters.
	 */
    private static String expressionContent(String expression) {
        return expression.substring(2,expression.length()-1).trim();
    }

    private boolean buildTree=true;
    private boolean tokensAreNodes=true;
    private boolean specialTokensAreNodes=true;
    private java.util.ArrayList<Node>nodes=new java.util.ArrayList<Node>();
    private java.util.ArrayList<java.lang.Integer>marks=new java.util.ArrayList<java.lang.Integer>();
    private int mark;
    // current mark
    private boolean node_created;
    /** 
     * Determines whether the current node was actually closed and
     * pushed.  This should only be called in the final user action of a
     * node scope.  
     */
    public boolean nodeCreated() {
        return node_created;
    }

    /** 
	 * Returns the root node of the AST.  It only makes sense to call
	 * this after a successful parse. 
	 */
    public Node rootNode() {
        return nodes.get(0);
    }

    /**
     * push a node onto the top of the node stack
     */
    public void pushNode(Node n) {
        nodes.add(n);
    }

    /** 
     * Returns the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return nodes.remove(nodes.size()-1);
    }

    /** 
     * Returns the node currently on the top of the stack. 
     */
    public Node peekNode() {
        return nodes.get(nodes.size()-1);
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     */
    public void pokeNode(Node n) {
        pokeNode(n,false);
    }

    /**
     * Puts the node on the top of the stack. If clearNodeScope is true,
     * it removes all the nodes in the current node scope and pushes
     * n onto the top. Otherwise, it simply replaces the node at the
     * top of the stack with n.
     */
    public void pokeNode(Node n,boolean clearNodeScope) {
        if (clearNodeScope) {
            clearNodeScope();
            nodes.add(n);
        }
        else {
            nodes.set(nodes.size()-1,n);
        }
    }

    /** Returns the number of children on the stack in the current node
	 * scope. 
	 */
    public int nodeArity() {
        return nodes.size()-mark;
    }

    public void clearNodeScope() {
        while (nodes.size()>mark) {
            popNode();
        }
    }

    public void openNodeScope(Node n) {
        marks.add(mark);
        mark=nodes.size();
        n.open();
    }

    /* A definite node is constructed from a specified number of
	 * children.  That number of nodes are popped from the stack and
	 * made the children of the definite node.  Then the definite node
	 * is pushed on to the stack. */
    public void closeNodeScope(Node n,int num) {
        mark=marks.remove(marks.size()-1);
        java.util.ArrayList<Node>nodes=new java.util.ArrayList<Node>();
        for(int i=0; 
        i<num; 
        i++) {
            nodes.add(popNode());
        }
        java.util.Collections.reverse(nodes);
        for(Node child : nodes) {
            if (specialTokensAreNodes&&(child instanceof Token)) {
                Token token=(Token) child;
                Token specialToken=token;
                while (specialToken!=null) {
                    specialToken=specialToken.specialToken;
                }
                while (specialToken!=null&&specialToken!=token) {
                    n.addChild(specialToken);
                    specialToken=specialToken.next;
                }
            }
            n.addChild(child);
        }
        n.close();
        pushNode(n);
        node_created=true;
    }

    /** 
	 * A conditional node is constructed if its condition is true.  All
	 * the nodes that have been pushed since the node was opened are
	 * made children of the conditional node, which is then pushed
	 * on to the stack.  If the condition is false the node is not
	 * constructed and they are left on the stack. 
	 */
    public void closeNodeScope(Node n,boolean condition) {
        if (condition) {
            int a=nodeArity();
            mark=marks.remove(marks.size()-1);
            java.util.ArrayList<Node>nodes=new java.util.ArrayList<Node>();
            while (a-->0) {
                nodes.add(popNode());
            }
            java.util.Collections.reverse(nodes);
            for(Node child : nodes) {
                if (specialTokensAreNodes&&(child instanceof Token)) {
                    Token token=(Token) child;
                    Token specialToken=token;
                    while (specialToken.specialToken!=null) {
                        specialToken=specialToken.specialToken;
                    }
                    while (specialToken!=null&&specialToken!=token) {
                        n.addChild(specialToken);
                        specialToken=specialToken.next;
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
            node_created=true;
        }
        else {
            mark=marks.remove(marks.size()-1);
            node_created=false;
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree=buildTree;
    }

    private boolean isSpecialToken(Node n) {
        if (n instanceof Token) {
            Token t=(Token) n;
            return t.next!=null&&t.next.specialToken==t;
        }
        return false;
    }

    /**
     * @deprecated
     * Kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    JspParser jjtree=this;
    /** Generated Lexer. */
    public JspLexer token_source;
    JavaCharStream jj_input_stream;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    Token current_token;
    /** Next token. */
    private Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos,jj_lastpos;
    private int jj_la;
    /** Whether we are looking ahead. */
    private boolean jj_lookingAhead=false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1=new int[29];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }
    private static void jj_la1_init_0() {
        jj_la1_0=new int[]{0x11000000,0x11000000,0x11000000,0x11000000,0xf9400000,0xf9400000,0xf9400000,0x0,0x0,0x0,0x0,0x0,0x0,0xf9400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
    }

    private static void jj_la1_init_1() {
        jj_la1_1=new int[]{0x0,0x0,0x0,0x0,0x7,0x1,0x1,0x6,0x10,0x6,0x6,0x400000,0x4000000,0x7,0x28000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x10000,0x10000,0xc0000,0xc0000};
    }

    private static void jj_la1_init_2() {
        jj_la1_2=new int[]{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x21c,0x21c,0x500,0x5c,0x5c,0xa0,0x3,0x1c,0x1000,0x0,0x0,0x0,0x0,0x0};
    }

    final private JJCalls[] jj_2_rtns=new JJCalls[2];
    private boolean jj_rescan=false;
    private int jj_gc=0;
    public JspParser(java.io.Reader stream) {
        jj_input_stream=new JavaCharStream(stream,1,1);
        token_source=new JspLexer(jj_input_stream);
        current_token=new Token();
        jj_ntk=-1;
        for(int i=0; 
        i<29; 
        i++) jj_la1[i]=-1; 
        for(int i=0; 
        i<jj_2_rtns.length; 
        i++) jj_2_rtns[i]=new JJCalls(); 
    }

    /** Constructor with generated Token Manager. */
    public JspParser(JspLexer tm) {
        token_source=tm;
        current_token=new Token();
        jj_ntk=-1;
        for(int i=0; 
        i<29; 
        i++) jj_la1[i]=-1; 
        for(int i=0; 
        i<jj_2_rtns.length; 
        i++) jj_2_rtns[i]=new JJCalls(); 
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken=current_token;
        if (current_token.next!=null) current_token=current_token.next;
        else current_token=current_token.next=token_source.getNextToken();
        jj_ntk=-1;
        if (current_token.kind==kind) {
            jj_gen++;
            if (++jj_gc>100) {
                jj_gc=0;
                for(int i=0; 
                i<jj_2_rtns.length; 
                i++) {
                    JJCalls c=jj_2_rtns[i];
                    while (c!=null) {
                        if (c.gen<jj_gen) c.first=null;
                        c=c.next;
                    }
                }
            }
            if (buildTree&&tokensAreNodes) {
                pushNode(current_token);
            }
            return current_token;
        }
        current_token=oldToken;
        jj_kind=kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls=new LookaheadSuccess();
    private boolean jj_scan_token(int kind) {
        if (jj_scanpos==jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next==null) {
                jj_lastpos=jj_scanpos=jj_scanpos.next=token_source.getNextToken();
            }
            else {
                jj_lastpos=jj_scanpos=jj_scanpos.next;
            }
        }
        else {
            jj_scanpos=jj_scanpos.next;
        }
        if (jj_rescan) {
            int i=0;
            Token tok=current_token;
            while (tok!=null&&tok!=jj_scanpos) {
                i++;
                tok=tok.next;
            }
            if (tok!=null) jj_add_error_token(kind,i);
        }
        if (jj_scanpos.kind!=kind) return true;
        if (jj_la==0&&jj_scanpos==jj_lastpos) throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (current_token.next!=null) current_token=current_token.next;
        else current_token=current_token.next=token_source.getNextToken();
        jj_ntk=-1;
        jj_gen++;
        return current_token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t=current_token;
        for(int i=0; 
        i<index; 
        i++) {
            if (t.next!=null) t=t.next;
            else t=t.next=token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt=current_token.next)==null) return(jj_ntk=(current_token.next=token_source.getNextToken()).kind);
        else return(jj_ntk=jj_nt.kind);
    }

    private java.util.ArrayList<int[]>jj_expentries=new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind=-1;
    private int[] jj_lasttokens=new int[100];
    private int jj_endpos;
    private void jj_add_error_token(int kind,int pos) {
        if (pos>=100) return;
        if (pos==jj_endpos+1) {
            jj_lasttokens[jj_endpos++]=kind;
        }
        else if (jj_endpos!=0) {
            jj_expentry=new int[jj_endpos];
            for(int i=0; 
            i<jj_endpos; 
            i++) {
                jj_expentry[i]=jj_lasttokens[i];
            }
            jj_entries_loop:
            for(java.util.Iterator<int[]>it=jj_expentries.iterator(); 
            it.hasNext(); 
            ) {
                int[] oldentry=(int[])(it.next());
                if (oldentry.length==jj_expentry.length) {
                    for(int i=0; 
                    i<jj_expentry.length; 
                    i++) {
                        if (oldentry[i]!=jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos!=0) jj_lasttokens[(jj_endpos=pos)-1]=kind;
        }
    }

    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens=new boolean[77];
        if (jj_kind>=0) {
            la1tokens[jj_kind]=true;
            jj_kind=-1;
        }
        for(int i=0; 
        i<29; 
        i++) {
            if (jj_la1[i]==jj_gen) {
                for(int j=0; 
                j<32; 
                j++) {
                    if ((jj_la1_0[i]&(1<<j))!=0) {
                        la1tokens[0+j]=true;
                    }
                    if ((jj_la1_1[i]&(1<<j))!=0) {
                        la1tokens[32+j]=true;
                    }
                    if ((jj_la1_2[i]&(1<<j))!=0) {
                        la1tokens[64+j]=true;
                    }
                }
            }
        }
        for(int i=0; 
        i<77; 
        i++) {
            if (la1tokens[i]) {
                jj_expentry=new int[1];
                jj_expentry[0]=i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos=0;
        jj_rescan_token();
        jj_add_error_token(0,0);
        int[][] exptokseq=new int[jj_expentries.size()][];
        for(int i=0; 
        i<jj_expentries.size(); 
        i++) {
            exptokseq[i]=(int[]) jj_expentries.get(i);
        }
        return new ParseException(current_token,exptokseq,tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan=true;
        for(int i=0; 
        i<2; 
        i++) {
            try {
                JJCalls p=jj_2_rtns[i];
                do {
                    if (p.gen>jj_gen) {
                        jj_la=p.arg;
                        jj_lastpos=jj_scanpos=p.first;
                        switch(i) {
                            case 0:
                            jj_3_1();
                            break;
                            case 1:
                            jj_3_2();
                            break;
                        }
                    }
                    p=p.next;
                }
                while (p!=null);
            }
            catch(LookaheadSuccess ls) {
            }
        }
        jj_rescan=false;
    }

    private void jj_save(int index,int xla) {
        JJCalls p=jj_2_rtns[index];
        while (p.gen>jj_gen) {
            if (p.next==null) {
                p=p.next=new JJCalls();
                break;
            }
            p=p.next;
        }
        p.gen=jj_gen+xla-jj_la;
        p.first=current_token;
        p.arg=xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }
    /**
 * The root of the AST of a JSP.
 */
    // jsp.freecc, line 275
    final public void CompilationUnit() throws ParseException {
        // jsp.freecc, line 278
        CompilationUnit node1=null;
        if (buildTree) {
            node1=new CompilationUnit();
            Token jjtStartToken=getToken(1);
            node1.setBeginLine(jjtStartToken.beginLine);
            node1.setBeginColumn(jjtStartToken.beginColumn);
            node1.setInputSource(this.getInputSource());
            openNodeScope(node1);
        }
        boolean hitException1=false;
        try {
            // jsp.freecc, line 278
            Prolog();
            // jsp.freecc, line 280
            Content();
            // jsp.freecc, line 280
            jj_consume_token(0);
        }
        catch(Exception e1) {
            hitException1=false;
            if (e1 instanceof ParseException) throw(ParseException) e1;
            if (e1 instanceof RuntimeException) throw(RuntimeException) e1;
            throw new RuntimeException(e1);
        }
        finally {
            if (buildTree) {
                if (!hitException1) {
                    closeNodeScope(node1,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node1.setEndLine(jjtEndToken.endLine);
                    node1.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * The optional prolog of a JSP, including (xml) declarations and DTD.
 */
    // jsp.freecc, line 287
    final public void Prolog() throws ParseException {
        // jsp.freecc, line 290
        // jsp.freecc, line 294
        if (jj_2_1(2147483647)) {
            // jsp.freecc, line 291
            // jsp.freecc, line 292
            label_1:
            while (true) {
                int int1=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int1==COMMENT_START||int1==JSP_COMMENT_START)) {
                    jj_la1[0]=jj_gen;
                    break label_1;
                }
                // jsp.freecc, line 292
                switch((jj_ntk==-1)?jj_ntk():
                jj_ntk) {
                    case COMMENT_START:
                    // jsp.freecc, line 292
                    // jsp.freecc, line 292
                    CommentTag();
                    break;
                    case JSP_COMMENT_START:
                    // jsp.freecc, line 292
                    // jsp.freecc, line 292
                    JspComment();
                    break;
                    default:
                    jj_la1[1]=jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            // jsp.freecc, line 293
            Declaration();
        }
        // jsp.freecc, line 300
        if (jj_2_2(2147483647)) {
            // jsp.freecc, line 297
            // jsp.freecc, line 298
            label_2:
            while (true) {
                int int2=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int2==COMMENT_START||int2==JSP_COMMENT_START)) {
                    jj_la1[2]=jj_gen;
                    break label_2;
                }
                // jsp.freecc, line 298
                switch((jj_ntk==-1)?jj_ntk():
                jj_ntk) {
                    case COMMENT_START:
                    // jsp.freecc, line 298
                    // jsp.freecc, line 298
                    CommentTag();
                    break;
                    case JSP_COMMENT_START:
                    // jsp.freecc, line 298
                    // jsp.freecc, line 298
                    JspComment();
                    break;
                    default:
                    jj_la1[3]=jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            // jsp.freecc, line 299
            DoctypeDeclaration();
        }
    }

    /**
 * Everything between a start-tag and the corresponding end-tag of an element.
 */
    // jsp.freecc, line 306
    final public void Content() throws ParseException {
        // jsp.freecc, line 310
        Content node2=null;
        if (buildTree) {
            node2=new Content();
            Token jjtStartToken=getToken(1);
            node2.setBeginLine(jjtStartToken.beginLine);
            node2.setBeginColumn(jjtStartToken.beginColumn);
            node2.setInputSource(this.getInputSource());
            openNodeScope(node2);
        }
        boolean hitException2=false;
        try {
            // jsp.freecc, line 310
            switch((jj_ntk==-1)?jj_ntk():
            jj_ntk) {
                case EL_EXPRESSION:
                case UNPARSED_TEXT:
                // jsp.freecc, line 310
                // jsp.freecc, line 310
                Text();
                break;
                case TAG_START:
                case COMMENT_START:
                case CDATA_START:
                case JSP_COMMENT_START:
                case JSP_DECLARATION_START:
                case JSP_EXPRESSION_START:
                case JSP_SCRIPTLET_START:
                case JSP_DIRECTIVE_START:
                // jsp.freecc, line 310
                // jsp.freecc, line 310
                ContentElementPossiblyWithText();
                break;
                default:
                jj_la1[4]=jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            // jsp.freecc, line 311
            label_3:
            while (true) {
                int int3=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int3==TAG_START||int3==COMMENT_START||int3==CDATA_START||int3==JSP_COMMENT_START||int3==JSP_DECLARATION_START||int3==JSP_EXPRESSION_START||int3==JSP_SCRIPTLET_START||int3==JSP_DIRECTIVE_START)) {
                    jj_la1[5]=jj_gen;
                    break label_3;
                }
                // jsp.freecc, line 311
                // jsp.freecc, line 311
                ContentElementPossiblyWithText();
            }
        }
        catch(Exception e2) {
            hitException2=false;
            if (e2 instanceof ParseException) throw(ParseException) e2;
            if (e2 instanceof RuntimeException) throw(RuntimeException) e2;
            throw new RuntimeException(e2);
        }
        finally {
            if (buildTree) {
                if (!hitException2) {
                    closeNodeScope(node2,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node2.setEndLine(jjtEndToken.endLine);
                    node2.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * A single (non-text) element that can occur between a start- and end-tag of an element.
 * Possibly followed by text.
 */
    // jsp.freecc, line 318
    final public void ContentElementPossiblyWithText() throws ParseException {
        // jsp.freecc, line 321
        // jsp.freecc, line 322
        switch((jj_ntk==-1)?jj_ntk():
        jj_ntk) {
            case COMMENT_START:
            // jsp.freecc, line 322
            // jsp.freecc, line 322
            CommentTag();
            break;
            case TAG_START:
            // jsp.freecc, line 323
            // jsp.freecc, line 323
            Element();
            break;
            case CDATA_START:
            // jsp.freecc, line 324
            // jsp.freecc, line 324
            CData();
            break;
            case JSP_COMMENT_START:
            // jsp.freecc, line 325
            // jsp.freecc, line 325
            JspComment();
            break;
            case JSP_DECLARATION_START:
            // jsp.freecc, line 326
            // jsp.freecc, line 326
            JspDeclaration();
            break;
            case JSP_EXPRESSION_START:
            // jsp.freecc, line 327
            // jsp.freecc, line 327
            JspExpression();
            break;
            case JSP_SCRIPTLET_START:
            // jsp.freecc, line 328
            // jsp.freecc, line 328
            JspScriptlet();
            break;
            case JSP_DIRECTIVE_START:
            // jsp.freecc, line 329
            // jsp.freecc, line 329
            JspDirective();
            break;
            default:
            jj_la1[6]=jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        // jsp.freecc, line 331
        int int4=(jj_ntk==-1)?jj_ntk():
        jj_ntk;
        if (int4==EL_EXPRESSION||int4==UNPARSED_TEXT) {
            // jsp.freecc, line 331
            // jsp.freecc, line 331
            Text();
        }
        else {
            jj_la1[7]=jj_gen;
        }
    }

    // jsp.freecc, line 334
    final public void JspDirective() throws ParseException {
        Token t;
        // jsp.freecc, line 337
        JspDirective node3=null;
        if (buildTree) {
            node3=new JspDirective();
            Token jjtStartToken=getToken(1);
            node3.setBeginLine(jjtStartToken.beginLine);
            node3.setBeginColumn(jjtStartToken.beginColumn);
            node3.setInputSource(this.getInputSource());
            openNodeScope(node3);
        }
        boolean hitException3=false;
        try {
            // jsp.freecc, line 337
            jj_consume_token(JSP_DIRECTIVE_START);
            // jsp.freecc, line 338
            t=jj_consume_token(JSP_DIRECTIVE_NAME);
            // jsp.freecc, line 338
            node3.setName(t.image);
            // jsp.freecc, line 342
            label_4:
            while (true) {
                int int5=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int5==JSP_DIRECTIVE_ATTRIBUTE_NAME)) {
                    jj_la1[8]=jj_gen;
                    break label_4;
                }
                // jsp.freecc, line 341
                // jsp.freecc, line 341
                JspDirectiveAttribute();
            }
            // jsp.freecc, line 343
            jj_consume_token(JSP_DIRECTIVE_END);
        }
        catch(Exception e3) {
            hitException3=false;
            if (e3 instanceof ParseException) throw(ParseException) e3;
            if (e3 instanceof RuntimeException) throw(RuntimeException) e3;
            throw new RuntimeException(e3);
        }
        finally {
            if (buildTree) {
                if (!hitException3) {
                    closeNodeScope(node3,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node3.setEndLine(jjtEndToken.endLine);
                    node3.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 364
    final public void JspDirectiveAttribute() throws ParseException {
        Token t;
        // jsp.freecc, line 367
        JspDirectiveAttribute node4=null;
        if (buildTree) {
            node4=new JspDirectiveAttribute();
            Token jjtStartToken=getToken(1);
            node4.setBeginLine(jjtStartToken.beginLine);
            node4.setBeginColumn(jjtStartToken.beginColumn);
            node4.setInputSource(this.getInputSource());
            openNodeScope(node4);
        }
        boolean hitException4=false;
        try {
            // jsp.freecc, line 367
            t=jj_consume_token(JSP_DIRECTIVE_ATTRIBUTE_NAME);
            // jsp.freecc, line 367
            node4.setName(t.image);
            // jsp.freecc, line 368
            jj_consume_token(JSP_DIRECTIVE_ATTRIBUTE_EQUALS);
            // jsp.freecc, line 369
            t=jj_consume_token(JSP_DIRECTIVE_ATTRIBUTE_VALUE);
            // jsp.freecc, line 369
            node4.setValue(quoteContent(t.image));
        }
        catch(Exception e4) {
            hitException4=false;
            if (e4 instanceof ParseException) throw(ParseException) e4;
            if (e4 instanceof RuntimeException) throw(RuntimeException) e4;
            throw new RuntimeException(e4);
        }
        finally {
            if (buildTree) {
                if (!hitException4) {
                    closeNodeScope(node4,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node4.setEndLine(jjtEndToken.endLine);
                    node4.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 399
    final public void JspScriptlet() throws ParseException {
        Token t;
        // jsp.freecc, line 402
        JspScriptlet node5=null;
        if (buildTree) {
            node5=new JspScriptlet();
            Token jjtStartToken=getToken(1);
            node5.setBeginLine(jjtStartToken.beginLine);
            node5.setBeginColumn(jjtStartToken.beginColumn);
            node5.setInputSource(this.getInputSource());
            openNodeScope(node5);
        }
        boolean hitException5=false;
        try {
            // jsp.freecc, line 402
            jj_consume_token(JSP_SCRIPTLET_START);
            // jsp.freecc, line 403
            t=jj_consume_token(JSP_SCRIPTLET);
            // jsp.freecc, line 403
            node5.setImage(t.image.trim());
            // jsp.freecc, line 404
            jj_consume_token(JSP_SCRIPTLET_END);
        }
        catch(Exception e5) {
            hitException5=false;
            if (e5 instanceof ParseException) throw(ParseException) e5;
            if (e5 instanceof RuntimeException) throw(RuntimeException) e5;
            throw new RuntimeException(e5);
        }
        finally {
            if (buildTree) {
                if (!hitException5) {
                    closeNodeScope(node5,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node5.setEndLine(jjtEndToken.endLine);
                    node5.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 425
    final public void JspExpression() throws ParseException {
        Token t;
        // jsp.freecc, line 428
        JspExpression node6=null;
        if (buildTree) {
            node6=new JspExpression();
            Token jjtStartToken=getToken(1);
            node6.setBeginLine(jjtStartToken.beginLine);
            node6.setBeginColumn(jjtStartToken.beginColumn);
            node6.setInputSource(this.getInputSource());
            openNodeScope(node6);
        }
        boolean hitException6=false;
        try {
            // jsp.freecc, line 428
            jj_consume_token(JSP_EXPRESSION_START);
            // jsp.freecc, line 429
            t=jj_consume_token(JSP_EXPRESSION);
            // jsp.freecc, line 429
            node6.setImage(t.image.trim());
            // jsp.freecc, line 430
            jj_consume_token(JSP_EXPRESSION_END);
        }
        catch(Exception e6) {
            hitException6=false;
            if (e6 instanceof ParseException) throw(ParseException) e6;
            if (e6 instanceof RuntimeException) throw(RuntimeException) e6;
            throw new RuntimeException(e6);
        }
        finally {
            if (buildTree) {
                if (!hitException6) {
                    closeNodeScope(node6,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node6.setEndLine(jjtEndToken.endLine);
                    node6.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 451
    final public void JspDeclaration() throws ParseException {
        Token t;
        // jsp.freecc, line 454
        JspDeclaration node7=null;
        if (buildTree) {
            node7=new JspDeclaration();
            Token jjtStartToken=getToken(1);
            node7.setBeginLine(jjtStartToken.beginLine);
            node7.setBeginColumn(jjtStartToken.beginColumn);
            node7.setInputSource(this.getInputSource());
            openNodeScope(node7);
        }
        boolean hitException7=false;
        try {
            // jsp.freecc, line 454
            jj_consume_token(JSP_DECLARATION_START);
            // jsp.freecc, line 455
            t=jj_consume_token(JSP_DECLARATION);
            // jsp.freecc, line 455
            node7.setImage(t.image.trim());
            // jsp.freecc, line 456
            jj_consume_token(JSP_DECLARATION_END);
        }
        catch(Exception e7) {
            hitException7=false;
            if (e7 instanceof ParseException) throw(ParseException) e7;
            if (e7 instanceof RuntimeException) throw(RuntimeException) e7;
            throw new RuntimeException(e7);
        }
        finally {
            if (buildTree) {
                if (!hitException7) {
                    closeNodeScope(node7,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node7.setEndLine(jjtEndToken.endLine);
                    node7.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 477
    final public void JspComment() throws ParseException {
        Token t;
        // jsp.freecc, line 480
        JspComment node8=null;
        if (buildTree) {
            node8=new JspComment();
            Token jjtStartToken=getToken(1);
            node8.setBeginLine(jjtStartToken.beginLine);
            node8.setBeginColumn(jjtStartToken.beginColumn);
            node8.setInputSource(this.getInputSource());
            openNodeScope(node8);
        }
        boolean hitException8=false;
        try {
            // jsp.freecc, line 480
            jj_consume_token(JSP_COMMENT_START);
            // jsp.freecc, line 481
            t=jj_consume_token(JSP_COMMENT_CONTENT);
            // jsp.freecc, line 481
            node8.setImage(t.image.trim());
            // jsp.freecc, line 482
            jj_consume_token(JSP_COMMENT_END);
        }
        catch(Exception e8) {
            hitException8=false;
            if (e8 instanceof ParseException) throw(ParseException) e8;
            if (e8 instanceof RuntimeException) throw(RuntimeException) e8;
            throw new RuntimeException(e8);
        }
        finally {
            if (buildTree) {
                if (!hitException8) {
                    closeNodeScope(node8,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node8.setEndLine(jjtEndToken.endLine);
                    node8.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * This production groups all characters between two tags, where
 * tag is an xml-tag "<...>" or a jsp-page-tag "<%...%>" or CDATA "<![CDATA[...]]>".
 * Text consists of unparsed text and/or Expression Language expressions.
 */
    // jsp.freecc, line 508
    final public void Text() throws ParseException {
        StringBuffer content=new StringBuffer();
        String tmp;
        // jsp.freecc, line 514
        Text node9=null;
        if (buildTree) {
            node9=new Text();
            Token jjtStartToken=getToken(1);
            node9.setBeginLine(jjtStartToken.beginLine);
            node9.setBeginColumn(jjtStartToken.beginColumn);
            node9.setInputSource(this.getInputSource());
            openNodeScope(node9);
        }
        boolean hitException9=false;
        try {
            // jsp.freecc, line 516
            label_5:
            while (true) {
                // jsp.freecc, line 514
                switch((jj_ntk==-1)?jj_ntk():
                jj_ntk) {
                    case UNPARSED_TEXT:
                    // jsp.freecc, line 514
                    // jsp.freecc, line 514
                    tmp=UnparsedText();
                    // jsp.freecc, line 514
                    content.append(tmp);
                    break;
                    case EL_EXPRESSION:
                    // jsp.freecc, line 515
                    // jsp.freecc, line 515
                    tmp=ElExpression();
                    // jsp.freecc, line 515
                    content.append(tmp);
                    break;
                    default:
                    jj_la1[9]=jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                int int6=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int6==EL_EXPRESSION||int6==UNPARSED_TEXT)) {
                    jj_la1[10]=jj_gen;
                    break label_5;
                }
            }
            // jsp.freecc, line 517
            node9.setImage(content.toString());
        }
        catch(Exception e9) {
            hitException9=false;
            if (e9 instanceof ParseException) throw(ParseException) e9;
            if (e9 instanceof RuntimeException) throw(RuntimeException) e9;
            throw new RuntimeException(e9);
        }
        finally {
            if (buildTree) {
                if (!hitException9) {
                    closeNodeScope(node9,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node9.setEndLine(jjtEndToken.endLine);
                    node9.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 538
    final public String UnparsedText() throws ParseException {
        Token t;
        // jsp.freecc, line 541
        UnparsedText node10=null;
        if (buildTree) {
            node10=new UnparsedText();
            Token jjtStartToken=getToken(1);
            node10.setBeginLine(jjtStartToken.beginLine);
            node10.setBeginColumn(jjtStartToken.beginColumn);
            node10.setInputSource(this.getInputSource());
            openNodeScope(node10);
        }
        boolean hitException10=false;
        try {
            // jsp.freecc, line 541
            t=jj_consume_token(UNPARSED_TEXT);
            // jsp.freecc, line 542
            node10.setImage(t.image);
            if (true) return t.image;
            throw new Error("Missing return statement in function");
        }
        catch(Exception e10) {
            hitException10=false;
            if (e10 instanceof ParseException) throw(ParseException) e10;
            if (e10 instanceof RuntimeException) throw(RuntimeException) e10;
            throw new RuntimeException(e10);
        }
        finally {
            if (buildTree) {
                if (!hitException10) {
                    closeNodeScope(node10,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node10.setEndLine(jjtEndToken.endLine);
                    node10.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * Text that contains no single quotes, and that does not contain the start
 * of a EL expression or value binding.
 */
    // jsp.freecc, line 570
    final public String UnparsedTextNoSingleQuotes() throws ParseException {
        Token t;
        // jsp.freecc, line 573
        UnparsedText node11=null;
        if (buildTree) {
            node11=new UnparsedText();
            Token jjtStartToken=getToken(1);
            node11.setBeginLine(jjtStartToken.beginLine);
            node11.setBeginColumn(jjtStartToken.beginColumn);
            node11.setInputSource(this.getInputSource());
            openNodeScope(node11);
        }
        boolean hitException11=false;
        try {
            // jsp.freecc, line 573
            t=jj_consume_token(UNPARSED_TEXT_NO_SINGLE_QUOTES);
            // jsp.freecc, line 574
            node11.setImage(t.image);
            if (true) return t.image;
            throw new Error("Missing return statement in function");
        }
        catch(Exception e11) {
            hitException11=false;
            if (e11 instanceof ParseException) throw(ParseException) e11;
            if (e11 instanceof RuntimeException) throw(RuntimeException) e11;
            throw new RuntimeException(e11);
        }
        finally {
            if (buildTree) {
                if (!hitException11) {
                    closeNodeScope(node11,true);
                    Token jjtEndToken=getToken(0);
                    node11.setEndLine(jjtEndToken.endLine);
                    node11.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * Text that contains no double quotes, and that does not contain the start
 * of a EL expression or value binding.
 */
    // jsp.freecc, line 602
    final public String UnparsedTextNoDoubleQuotes() throws ParseException {
        Token t;
        // jsp.freecc, line 605
        UnparsedText node12=null;
        if (buildTree) {
            node12=new UnparsedText();
            Token jjtStartToken=getToken(1);
            node12.setBeginLine(jjtStartToken.beginLine);
            node12.setBeginColumn(jjtStartToken.beginColumn);
            node12.setInputSource(this.getInputSource());
            openNodeScope(node12);
        }
        boolean hitException12=false;
        try {
            // jsp.freecc, line 605
            t=jj_consume_token(UNPARSED_TEXT_NO_DOUBLE_QUOTES);
            // jsp.freecc, line 606
            node12.setImage(t.image);
            if (true) return t.image;
            throw new Error("Missing return statement in function");
        }
        catch(Exception e12) {
            hitException12=false;
            if (e12 instanceof ParseException) throw(ParseException) e12;
            if (e12 instanceof RuntimeException) throw(RuntimeException) e12;
            throw new RuntimeException(e12);
        }
        finally {
            if (buildTree) {
                if (!hitException12) {
                    closeNodeScope(node12,true);
                    Token jjtEndToken=getToken(0);
                    node12.setEndLine(jjtEndToken.endLine);
                    node12.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * An EL expression, not within an attribute value.
 */
    // jsp.freecc, line 634
    final public String ElExpression() throws ParseException {
        Token t;
        // jsp.freecc, line 637
        ElExpression node13=null;
        if (buildTree) {
            node13=new ElExpression();
            Token jjtStartToken=getToken(1);
            node13.setBeginLine(jjtStartToken.beginLine);
            node13.setBeginColumn(jjtStartToken.beginColumn);
            node13.setInputSource(this.getInputSource());
            openNodeScope(node13);
        }
        boolean hitException13=false;
        try {
            // jsp.freecc, line 637
            t=jj_consume_token(EL_EXPRESSION);
            // jsp.freecc, line 638
            node13.setImage(expressionContent(t.image));
            if (true) return t.image;
            throw new Error("Missing return statement in function");
        }
        catch(Exception e13) {
            hitException13=false;
            if (e13 instanceof ParseException) throw(ParseException) e13;
            if (e13 instanceof RuntimeException) throw(RuntimeException) e13;
            throw new RuntimeException(e13);
        }
        finally {
            if (buildTree) {
                if (!hitException13) {
                    closeNodeScope(node13,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node13.setEndLine(jjtEndToken.endLine);
                    node13.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 662
    final public String ValueBindingInAttribute() throws ParseException {
        Token t;
        // jsp.freecc, line 665
        ValueBinding node14=null;
        if (buildTree) {
            node14=new ValueBinding();
            Token jjtStartToken=getToken(1);
            node14.setBeginLine(jjtStartToken.beginLine);
            node14.setBeginColumn(jjtStartToken.beginColumn);
            node14.setInputSource(this.getInputSource());
            openNodeScope(node14);
        }
        boolean hitException14=false;
        try {
            // jsp.freecc, line 665
            t=jj_consume_token(VALUE_BINDING_IN_ATTRIBUTE);
            // jsp.freecc, line 666
            node14.setImage(expressionContent(t.image));
            if (true) return t.image;
            throw new Error("Missing return statement in function");
        }
        catch(Exception e14) {
            hitException14=false;
            if (e14 instanceof ParseException) throw(ParseException) e14;
            if (e14 instanceof RuntimeException) throw(RuntimeException) e14;
            throw new RuntimeException(e14);
        }
        finally {
            if (buildTree) {
                if (!hitException14) {
                    closeNodeScope(node14,true);
                    Token jjtEndToken=getToken(0);
                    node14.setEndLine(jjtEndToken.endLine);
                    node14.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 706
    final public String ElExpressionInAttribute() throws ParseException {
        Token t;
        // jsp.freecc, line 709
        ElExpression node15=null;
        if (buildTree) {
            node15=new ElExpression();
            Token jjtStartToken=getToken(1);
            node15.setBeginLine(jjtStartToken.beginLine);
            node15.setBeginColumn(jjtStartToken.beginColumn);
            node15.setInputSource(this.getInputSource());
            openNodeScope(node15);
        }
        boolean hitException15=false;
        try {
            // jsp.freecc, line 709
            t=jj_consume_token(EL_EXPRESSION_IN_ATTRIBUTE);
            // jsp.freecc, line 710
            node15.setImage(expressionContent(t.image));
            if (true) return t.image;
            throw new Error("Missing return statement in function");
        }
        catch(Exception e15) {
            hitException15=false;
            if (e15 instanceof ParseException) throw(ParseException) e15;
            if (e15 instanceof RuntimeException) throw(RuntimeException) e15;
            throw new RuntimeException(e15);
        }
        finally {
            if (buildTree) {
                if (!hitException15) {
                    closeNodeScope(node15,true);
                    Token jjtEndToken=getToken(0);
                    node15.setEndLine(jjtEndToken.endLine);
                    node15.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 734
    final public void CData() throws ParseException {
        StringBuffer content=new StringBuffer();
        Token t;
        // jsp.freecc, line 740
        CData node16=null;
        if (buildTree) {
            node16=new CData();
            Token jjtStartToken=getToken(1);
            node16.setBeginLine(jjtStartToken.beginLine);
            node16.setBeginColumn(jjtStartToken.beginColumn);
            node16.setInputSource(this.getInputSource());
            openNodeScope(node16);
        }
        boolean hitException16=false;
        try {
            // jsp.freecc, line 740
            jj_consume_token(CDATA_START);
            // jsp.freecc, line 740
            label_6:
            while (true) {
                int int7=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int7==UNPARSED)) {
                    jj_la1[11]=jj_gen;
                    break label_6;
                }
                // jsp.freecc, line 740
                // jsp.freecc, line 740
                t=jj_consume_token(UNPARSED);
                // jsp.freecc, line 740
                content.append(t.image);
            }
            // jsp.freecc, line 740
            jj_consume_token(CDATA_END);
            // jsp.freecc, line 741
            node16.setImage(content.toString());
        }
        catch(Exception e16) {
            hitException16=false;
            if (e16 instanceof ParseException) throw(ParseException) e16;
            if (e16 instanceof RuntimeException) throw(RuntimeException) e16;
            throw new RuntimeException(e16);
        }
        finally {
            if (buildTree) {
                if (!hitException16) {
                    closeNodeScope(node16,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node16.setEndLine(jjtEndToken.endLine);
                    node16.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * A XML element, either with a single empty tag, or with a starting and closing tag
 * with optional contained content.
 */
    // jsp.freecc, line 768
    final public void Element() throws ParseException {
        Token startTagName;
        Token endTagName;
        String tagName;
        // jsp.freecc, line 775
        Element node17=null;
        if (buildTree) {
            node17=new Element();
            Token jjtStartToken=getToken(1);
            node17.setBeginLine(jjtStartToken.beginLine);
            node17.setBeginColumn(jjtStartToken.beginColumn);
            node17.setInputSource(this.getInputSource());
            openNodeScope(node17);
        }
        boolean hitException17=false;
        try {
            // jsp.freecc, line 775
            jj_consume_token(TAG_START);
            // jsp.freecc, line 776
            startTagName=jj_consume_token(TAG_NAME);
            // jsp.freecc, line 776
            tagName=startTagName.image;
            node17.setName(tagName);
            // jsp.freecc, line 777
            label_7:
            while (true) {
                int int8=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int8==ATTR_NAME)) {
                    jj_la1[12]=jj_gen;
                    break label_7;
                }
                // jsp.freecc, line 777
                // jsp.freecc, line 777
                Attribute();
            }
            // jsp.freecc, line 779
            switch((jj_ntk==-1)?jj_ntk():
            jj_ntk) {
                case TAG_END:
                // jsp.freecc, line 779
                // jsp.freecc, line 779
                // jsp.freecc, line 779
                jj_consume_token(TAG_END);
                // jsp.freecc, line 780
                node17.setEmpty(false);
                // jsp.freecc, line 782
                int int9=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (int9==TAG_START||int9==COMMENT_START||int9==CDATA_START||int9==JSP_COMMENT_START||int9==JSP_DECLARATION_START||int9==JSP_EXPRESSION_START||int9==JSP_SCRIPTLET_START||int9==JSP_DIRECTIVE_START||int9==EL_EXPRESSION||int9==UNPARSED_TEXT) {
                    // jsp.freecc, line 782
                    // jsp.freecc, line 782
                    Content();
                }
                else {
                    jj_la1[13]=jj_gen;
                }
                // jsp.freecc, line 784
                jj_consume_token(ENDTAG_START);
                // jsp.freecc, line 785
                endTagName=jj_consume_token(TAG_NAME);
                // jsp.freecc, line 786
                if (!tagName.equalsIgnoreCase(endTagName.image)) {
                    if (true) throw new OrizonJspStartAndEndTagMismatchException(startTagName.beginLine,startTagName.beginColumn,startTagName.image,endTagName.beginLine,endTagName.beginColumn,endTagName.image);
                }
                // jsp.freecc, line 795
                jj_consume_token(TAG_END);
                break;
                case TAG_SLASHEND:
                // jsp.freecc, line 799
                // jsp.freecc, line 799
                // jsp.freecc, line 799
                jj_consume_token(TAG_SLASHEND);
                // jsp.freecc, line 799
                node17.setEmpty(true);
                break;
                default:
                jj_la1[14]=jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        catch(Exception e17) {
            hitException17=false;
            if (e17 instanceof ParseException) throw(ParseException) e17;
            if (e17 instanceof RuntimeException) throw(RuntimeException) e17;
            throw new RuntimeException(e17);
        }
        finally {
            if (buildTree) {
                if (!hitException17) {
                    closeNodeScope(node17,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node17.setEndLine(jjtEndToken.endLine);
                    node17.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 838
    final public void Attribute() throws ParseException {
        Token t;
        // jsp.freecc, line 841
        Attribute node18=null;
        if (buildTree) {
            node18=new Attribute();
            Token jjtStartToken=getToken(1);
            node18.setBeginLine(jjtStartToken.beginLine);
            node18.setBeginColumn(jjtStartToken.beginColumn);
            node18.setInputSource(this.getInputSource());
            openNodeScope(node18);
        }
        boolean hitException18=false;
        try {
            // jsp.freecc, line 841
            t=jj_consume_token(ATTR_NAME);
            // jsp.freecc, line 841
            node18.setName(t.image);
            // jsp.freecc, line 843
            // jsp.freecc, line 843
            jj_consume_token(ATTR_EQ);
            // jsp.freecc, line 844
            AttributeValue();
        }
        catch(Exception e18) {
            hitException18=false;
            if (e18 instanceof ParseException) throw(ParseException) e18;
            if (e18 instanceof RuntimeException) throw(RuntimeException) e18;
            throw new RuntimeException(e18);
        }
        finally {
            if (buildTree) {
                if (!hitException18) {
                    closeNodeScope(node18,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node18.setEndLine(jjtEndToken.endLine);
                    node18.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * The value of an attribute of an element.
 * EL expressions, JSF value bindings, and JSP expressions
 * are parsed as sub-nodes of the AttributeValue node.
 */
    // jsp.freecc, line 872
    final public void AttributeValue() throws ParseException {
        StringBuffer content=new StringBuffer();
        String tmp;
        Token t;
        // jsp.freecc, line 879
        AttributeValue node19=null;
        if (buildTree) {
            node19=new AttributeValue();
            Token jjtStartToken=getToken(1);
            node19.setBeginLine(jjtStartToken.beginLine);
            node19.setBeginColumn(jjtStartToken.beginColumn);
            node19.setInputSource(this.getInputSource());
            openNodeScope(node19);
        }
        boolean hitException19=false;
        try {
            // jsp.freecc, line 880
            switch((jj_ntk==-1)?jj_ntk():
            jj_ntk) {
                case DOUBLE_QUOTE:
                // jsp.freecc, line 880
                // jsp.freecc, line 880
                // jsp.freecc, line 880
                jj_consume_token(DOUBLE_QUOTE);
                // jsp.freecc, line 883
                label_8:
                while (true) {
                    int int10=(jj_ntk==-1)?jj_ntk():
                    jj_ntk;
                    if (!(int10==EL_EXPRESSION_IN_ATTRIBUTE||int10==VALUE_BINDING_IN_ATTRIBUTE||int10==JSP_EXPRESSION_IN_ATTRIBUTE||int10==UNPARSED_TEXT_NO_DOUBLE_QUOTES)) {
                        jj_la1[15]=jj_gen;
                        break label_8;
                    }
                    // jsp.freecc, line 881
                    // jsp.freecc, line 881
                    switch((jj_ntk==-1)?jj_ntk():
                    jj_ntk) {
                        case UNPARSED_TEXT_NO_DOUBLE_QUOTES:
                        // jsp.freecc, line 881
                        // jsp.freecc, line 881
                        tmp=UnparsedTextNoDoubleQuotes();
                        break;
                        case EL_EXPRESSION_IN_ATTRIBUTE:
                        case VALUE_BINDING_IN_ATTRIBUTE:
                        case JSP_EXPRESSION_IN_ATTRIBUTE:
                        // jsp.freecc, line 882
                        // jsp.freecc, line 882
                        tmp=QuoteIndependentAttributeValueContent();
                        break;
                        default:
                        jj_la1[16]=jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    // jsp.freecc, line 883
                    content.append(tmp);
                }
                // jsp.freecc, line 884
                switch((jj_ntk==-1)?jj_ntk():
                jj_ntk) {
                    case ENDING_DOUBLE_QUOTE:
                    // jsp.freecc, line 884
                    // jsp.freecc, line 884
                    jj_consume_token(ENDING_DOUBLE_QUOTE);
                    break;
                    case DOLLAR_OR_HASH_DOUBLE_QUOTE:
                    // jsp.freecc, line 885
                    // jsp.freecc, line 885
                    t=jj_consume_token(DOLLAR_OR_HASH_DOUBLE_QUOTE);
                    // jsp.freecc, line 885
                    content.append(t.image.substring(0,1));
                    break;
                    default:
                    jj_la1[17]=jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
                case SINGLE_QUOTE:
                // jsp.freecc, line 889
                // jsp.freecc, line 889
                // jsp.freecc, line 889
                jj_consume_token(SINGLE_QUOTE);
                // jsp.freecc, line 892
                label_9:
                while (true) {
                    int int11=(jj_ntk==-1)?jj_ntk():
                    jj_ntk;
                    if (!(int11==EL_EXPRESSION_IN_ATTRIBUTE||int11==VALUE_BINDING_IN_ATTRIBUTE||int11==JSP_EXPRESSION_IN_ATTRIBUTE||int11==UNPARSED_TEXT_NO_SINGLE_QUOTES)) {
                        jj_la1[18]=jj_gen;
                        break label_9;
                    }
                    // jsp.freecc, line 890
                    // jsp.freecc, line 890
                    switch((jj_ntk==-1)?jj_ntk():
                    jj_ntk) {
                        case UNPARSED_TEXT_NO_SINGLE_QUOTES:
                        // jsp.freecc, line 890
                        // jsp.freecc, line 890
                        tmp=UnparsedTextNoSingleQuotes();
                        break;
                        case EL_EXPRESSION_IN_ATTRIBUTE:
                        case VALUE_BINDING_IN_ATTRIBUTE:
                        case JSP_EXPRESSION_IN_ATTRIBUTE:
                        // jsp.freecc, line 891
                        // jsp.freecc, line 891
                        tmp=QuoteIndependentAttributeValueContent();
                        break;
                        default:
                        jj_la1[19]=jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
                    // jsp.freecc, line 892
                    content.append(tmp);
                }
                // jsp.freecc, line 893
                switch((jj_ntk==-1)?jj_ntk():
                jj_ntk) {
                    case ENDING_SINGLE_QUOTE:
                    // jsp.freecc, line 893
                    // jsp.freecc, line 893
                    jj_consume_token(ENDING_SINGLE_QUOTE);
                    break;
                    case DOLLAR_OR_HASH_SINGLE_QUOTE:
                    // jsp.freecc, line 894
                    // jsp.freecc, line 894
                    t=jj_consume_token(DOLLAR_OR_HASH_SINGLE_QUOTE);
                    // jsp.freecc, line 894
                    content.append(t.image.substring(0,1));
                    break;
                    default:
                    jj_la1[20]=jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
                default:
                jj_la1[21]=jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            // jsp.freecc, line 898
            node19.setImage(content.toString());
        }
        catch(Exception e19) {
            hitException19=false;
            if (e19 instanceof ParseException) throw(ParseException) e19;
            if (e19 instanceof RuntimeException) throw(RuntimeException) e19;
            throw new RuntimeException(e19);
        }
        finally {
            if (buildTree) {
                if (!hitException19) {
                    closeNodeScope(node19,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node19.setEndLine(jjtEndToken.endLine);
                    node19.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    /**
 * Partial content of an attribute value that can contain all quotes.
 * This groups EL expressions, value bindings, and JSP expressions.
 */
    // jsp.freecc, line 925
    final public String QuoteIndependentAttributeValueContent() throws ParseException {
        String tmp;
        // jsp.freecc, line 928
        // jsp.freecc, line 928
        switch((jj_ntk==-1)?jj_ntk():
        jj_ntk) {
            case EL_EXPRESSION_IN_ATTRIBUTE:
            // jsp.freecc, line 928
            // jsp.freecc, line 928
            tmp=ElExpressionInAttribute();
            break;
            case VALUE_BINDING_IN_ATTRIBUTE:
            // jsp.freecc, line 929
            // jsp.freecc, line 929
            tmp=ValueBindingInAttribute();
            break;
            case JSP_EXPRESSION_IN_ATTRIBUTE:
            // jsp.freecc, line 930
            // jsp.freecc, line 930
            tmp=JspExpressionInAttribute();
            break;
            default:
            jj_la1[22]=jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        // jsp.freecc, line 932
        if (true) return tmp;
        throw new Error("Missing return statement in function");
    }

    // jsp.freecc, line 935
    final public String JspExpressionInAttribute() throws ParseException {
        Token t;
        // jsp.freecc, line 938
        JspExpressionInAttribute node20=null;
        if (buildTree) {
            node20=new JspExpressionInAttribute();
            Token jjtStartToken=getToken(1);
            node20.setBeginLine(jjtStartToken.beginLine);
            node20.setBeginColumn(jjtStartToken.beginColumn);
            node20.setInputSource(this.getInputSource());
            openNodeScope(node20);
        }
        boolean hitException20=false;
        try {
            // jsp.freecc, line 938
            t=jj_consume_token(JSP_EXPRESSION_IN_ATTRIBUTE);
            // jsp.freecc, line 939
            node20.setImage(t.image.substring(3,t.image.length()-2).trim());
            // without <% and %>
            if (true) return t.image;
            throw new Error("Missing return statement in function");
        }
        catch(Exception e20) {
            hitException20=false;
            if (e20 instanceof ParseException) throw(ParseException) e20;
            if (e20 instanceof RuntimeException) throw(RuntimeException) e20;
            throw new RuntimeException(e20);
        }
        finally {
            if (buildTree) {
                if (!hitException20) {
                    closeNodeScope(node20,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node20.setEndLine(jjtEndToken.endLine);
                    node20.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 963
    final public void CommentTag() throws ParseException {
        StringBuffer content=new StringBuffer();
        Token t;
        // jsp.freecc, line 969
        CommentTag node21=null;
        if (buildTree) {
            node21=new CommentTag();
            Token jjtStartToken=getToken(1);
            node21.setBeginLine(jjtStartToken.beginLine);
            node21.setBeginColumn(jjtStartToken.beginColumn);
            node21.setInputSource(this.getInputSource());
            openNodeScope(node21);
        }
        boolean hitException21=false;
        try {
            // jsp.freecc, line 969
            jj_consume_token(COMMENT_START);
            // jsp.freecc, line 970
            label_10:
            while (true) {
                int int12=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int12==COMMENT_TEXT)) {
                    jj_la1[23]=jj_gen;
                    break label_10;
                }
                // jsp.freecc, line 970
                // jsp.freecc, line 970
                t=jj_consume_token(COMMENT_TEXT);
                // jsp.freecc, line 970
                content.append(t.image);
            }
            // jsp.freecc, line 971
            jj_consume_token(COMMENT_END);
            // jsp.freecc, line 972
            node21.setImage(content.toString().trim());
        }
        catch(Exception e21) {
            hitException21=false;
            if (e21 instanceof ParseException) throw(ParseException) e21;
            if (e21 instanceof RuntimeException) throw(RuntimeException) e21;
            throw new RuntimeException(e21);
        }
        finally {
            if (buildTree) {
                if (!hitException21) {
                    closeNodeScope(node21,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node21.setEndLine(jjtEndToken.endLine);
                    node21.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 996
    final public void Declaration() throws ParseException {
        Token t;
        // jsp.freecc, line 999
        Declaration node22=null;
        if (buildTree) {
            node22=new Declaration();
            Token jjtStartToken=getToken(1);
            node22.setBeginLine(jjtStartToken.beginLine);
            node22.setBeginColumn(jjtStartToken.beginColumn);
            node22.setInputSource(this.getInputSource());
            openNodeScope(node22);
        }
        boolean hitException22=false;
        try {
            // jsp.freecc, line 999
            jj_consume_token(DECL_START);
            // jsp.freecc, line 1000
            t=jj_consume_token(TAG_NAME);
            // jsp.freecc, line 1000
            node22.setName(t.image);
            // jsp.freecc, line 1001
            label_11:
            while (true) {
                int int13=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (!(int13==ATTR_NAME)) {
                    jj_la1[24]=jj_gen;
                    break label_11;
                }
                // jsp.freecc, line 1001
                // jsp.freecc, line 1001
                Attribute();
            }
            // jsp.freecc, line 1002
            jj_consume_token(DECL_END);
        }
        catch(Exception e22) {
            hitException22=false;
            if (e22 instanceof ParseException) throw(ParseException) e22;
            if (e22 instanceof RuntimeException) throw(RuntimeException) e22;
            throw new RuntimeException(e22);
        }
        finally {
            if (buildTree) {
                if (!hitException22) {
                    closeNodeScope(node22,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node22.setEndLine(jjtEndToken.endLine);
                    node22.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 1023
    final public void DoctypeDeclaration() throws ParseException {
        Token t;
        // jsp.freecc, line 1026
        DoctypeDeclaration node23=null;
        if (buildTree) {
            node23=new DoctypeDeclaration();
            Token jjtStartToken=getToken(1);
            node23.setBeginLine(jjtStartToken.beginLine);
            node23.setBeginColumn(jjtStartToken.beginColumn);
            node23.setInputSource(this.getInputSource());
            openNodeScope(node23);
        }
        boolean hitException23=false;
        try {
            // jsp.freecc, line 1026
            jj_consume_token(DOCTYPE_DECL_START);
            // jsp.freecc, line 1027
            jj_consume_token(WHITESPACES);
            // jsp.freecc, line 1028
            t=jj_consume_token(NAME);
            // jsp.freecc, line 1028
            node23.setName(t.image);
            // jsp.freecc, line 1029
            int int14=(jj_ntk==-1)?jj_ntk():
            jj_ntk;
            if (int14==WHITESPACES) {
                // jsp.freecc, line 1029
                // jsp.freecc, line 1029
                jj_consume_token(WHITESPACES);
            }
            else {
                jj_la1[25]=jj_gen;
            }
            // jsp.freecc, line 1030
            int int16=(jj_ntk==-1)?jj_ntk():
            jj_ntk;
            if (int16==PUBLIC||int16==SYSTEM) {
                // jsp.freecc, line 1030
                // jsp.freecc, line 1030
                DoctypeExternalId();
                // jsp.freecc, line 1030
                int int15=(jj_ntk==-1)?jj_ntk():
                jj_ntk;
                if (int15==WHITESPACES) {
                    // jsp.freecc, line 1030
                    // jsp.freecc, line 1030
                    jj_consume_token(WHITESPACES);
                }
                else {
                    jj_la1[26]=jj_gen;
                }
            }
            else {
                jj_la1[27]=jj_gen;
            }
            // jsp.freecc, line 1031
            jj_consume_token(DOCTYPE_DECL_END);
        }
        catch(Exception e23) {
            hitException23=false;
            if (e23 instanceof ParseException) throw(ParseException) e23;
            if (e23 instanceof RuntimeException) throw(RuntimeException) e23;
            throw new RuntimeException(e23);
        }
        finally {
            if (buildTree) {
                if (!hitException23) {
                    closeNodeScope(node23,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node23.setEndLine(jjtEndToken.endLine);
                    node23.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    // jsp.freecc, line 1052
    final public void DoctypeExternalId() throws ParseException {
        Token systemLiteral;
        Token pubIdLiteral;
        // jsp.freecc, line 1058
        DoctypeExternalId node24=null;
        if (buildTree) {
            node24=new DoctypeExternalId();
            Token jjtStartToken=getToken(1);
            node24.setBeginLine(jjtStartToken.beginLine);
            node24.setBeginColumn(jjtStartToken.beginColumn);
            node24.setInputSource(this.getInputSource());
            openNodeScope(node24);
        }
        boolean hitException24=false;
        try {
            switch((jj_ntk==-1)?jj_ntk():
            jj_ntk) {
                case SYSTEM:
                // jsp.freecc, line 1058
                // jsp.freecc, line 1058
                // jsp.freecc, line 1058
                jj_consume_token(SYSTEM);
                // jsp.freecc, line 1059
                jj_consume_token(WHITESPACES);
                // jsp.freecc, line 1060
                systemLiteral=jj_consume_token(QUOTED_LITERAL);
                // jsp.freecc, line 1061
                node24.setUri(quoteContent(systemLiteral.image));
                break;
                case PUBLIC:
                // jsp.freecc, line 1064
                // jsp.freecc, line 1064
                // jsp.freecc, line 1064
                jj_consume_token(PUBLIC);
                // jsp.freecc, line 1065
                jj_consume_token(WHITESPACES);
                // jsp.freecc, line 1066
                pubIdLiteral=jj_consume_token(QUOTED_LITERAL);
                // jsp.freecc, line 1067
                node24.setPublicId(quoteContent(pubIdLiteral.image));
                // jsp.freecc, line 1068
                jj_consume_token(WHITESPACES);
                // jsp.freecc, line 1069
                systemLiteral=jj_consume_token(QUOTED_LITERAL);
                // jsp.freecc, line 1070
                node24.setUri(quoteContent(systemLiteral.image));
                break;
                default:
                jj_la1[28]=jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        catch(Exception e24) {
            hitException24=false;
            if (e24 instanceof ParseException) throw(ParseException) e24;
            if (e24 instanceof RuntimeException) throw(RuntimeException) e24;
            throw new RuntimeException(e24);
        }
        finally {
            if (buildTree) {
                if (!hitException24) {
                    closeNodeScope(node24,nodeArity()>1);
                    Token jjtEndToken=getToken(0);
                    node24.setEndLine(jjtEndToken.endLine);
                    node24.setEndColumn(jjtEndToken.endColumn);
                }
                else {
                    clearNodeScope();
                    mark=marks.remove(marks.size()-1);
                }
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la=xla;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!jj_3_1();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
        finally {
            jj_save(0,xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la=xla;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!jj_3_2();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
        finally {
            jj_save(1,xla);
        }
    }

    private boolean jj_3_1() {
        while (true) {
            Token token17=jj_scanpos;
            if (jj_3R_12()) {
                jj_scanpos=token17;
                break;
            }
        }
        if (jj_3R_13()) return true;
        return false;
    }

    private boolean jj_3_2() {
        while (true) {
            Token token18=jj_scanpos;
            if (jj_3R_14()) {
                jj_scanpos=token18;
                break;
            }
        }
        if (jj_3R_15()) return true;
        return false;
    }

    private boolean jj_3R_12() {
        Token token19=jj_scanpos;
        if (jj_3R_16()) {
            jj_scanpos=token19;
            if (jj_3R_17()) return true;
        }
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_scan_token(DECL_START)) return true;
        if (jj_scan_token(TAG_NAME)) return true;
        while (true) {
            Token token20=jj_scanpos;
            if (jj_3R_18()) {
                jj_scanpos=token20;
                break;
            }
        }
        if (jj_scan_token(DECL_END)) return true;
        return false;
    }

    private boolean jj_3R_14() {
        Token token21=jj_scanpos;
        if (jj_3R_19()) {
            jj_scanpos=token21;
            if (jj_3R_20()) return true;
        }
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_scan_token(DOCTYPE_DECL_START)) return true;
        if (jj_scan_token(WHITESPACES)) return true;
        if (jj_scan_token(NAME)) return true;
        Token token22=jj_scanpos;
        if (jj_scan_token(48)) jj_scanpos=token22;
        Token token23=jj_scanpos;
        if (jj_3R_21()) jj_scanpos=token23;
        if (jj_scan_token(DOCTYPE_DECL_END)) return true;
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_3R_24()) return true;
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_20() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_21() {
        if (jj_3R_25()) return true;
        Token token24=jj_scanpos;
        if (jj_scan_token(48)) jj_scanpos=token24;
        return false;
    }

    private boolean jj_3R_22() {
        if (jj_scan_token(COMMENT_START)) return true;
        while (true) {
            Token token25=jj_scanpos;
            if (jj_3R_26()) {
                jj_scanpos=token25;
                break;
            }
        }
        if (jj_scan_token(COMMENT_END)) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_scan_token(JSP_COMMENT_START)) return true;
        if (jj_scan_token(JSP_COMMENT_CONTENT)) return true;
        if (jj_scan_token(JSP_COMMENT_END)) return true;
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_scan_token(ATTR_NAME)) return true;
        if (jj_scan_token(ATTR_EQ)) return true;
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3R_25() {
        Token token26=jj_scanpos;
        if (jj_3R_28()) {
            jj_scanpos=token26;
            if (jj_3R_29()) return true;
        }
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_scan_token(COMMENT_TEXT)) return true;
        return false;
    }

    private boolean jj_3R_27() {
        Token token27=jj_scanpos;
        if (jj_3R_30()) {
            jj_scanpos=token27;
            if (jj_3R_31()) return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_scan_token(SYSTEM)) return true;
        if (jj_scan_token(WHITESPACES)) return true;
        if (jj_scan_token(QUOTED_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_scan_token(PUBLIC)) return true;
        if (jj_scan_token(WHITESPACES)) return true;
        if (jj_scan_token(QUOTED_LITERAL)) return true;
        if (jj_scan_token(WHITESPACES)) return true;
        if (jj_scan_token(QUOTED_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_scan_token(DOUBLE_QUOTE)) return true;
        while (true) {
            Token token28=jj_scanpos;
            if (jj_3R_32()) {
                jj_scanpos=token28;
                break;
            }
        }
        Token token29=jj_scanpos;
        if (jj_scan_token(72)) {
            jj_scanpos=token29;
            if (jj_3R_33()) return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_scan_token(SINGLE_QUOTE)) return true;
        while (true) {
            Token token30=jj_scanpos;
            if (jj_3R_34()) {
                jj_scanpos=token30;
                break;
            }
        }
        Token token31=jj_scanpos;
        if (jj_scan_token(69)) {
            jj_scanpos=token31;
            if (jj_3R_35()) return true;
        }
        return false;
    }

    private boolean jj_3R_32() {
        Token token32=jj_scanpos;
        if (jj_3R_36()) {
            jj_scanpos=token32;
            if (jj_3R_37()) return true;
        }
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_scan_token(DOLLAR_OR_HASH_DOUBLE_QUOTE)) return true;
        return false;
    }

    private boolean jj_3R_34() {
        Token token33=jj_scanpos;
        if (jj_3R_38()) {
            jj_scanpos=token33;
            if (jj_3R_39()) return true;
        }
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_scan_token(DOLLAR_OR_HASH_SINGLE_QUOTE)) return true;
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_3R_40()) return true;
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3R_39() {
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(UNPARSED_TEXT_NO_DOUBLE_QUOTES)) return true;
        return false;
    }

    private boolean jj_3R_41() {
        Token token34=jj_scanpos;
        if (jj_3R_43()) {
            jj_scanpos=token34;
            if (jj_3R_44()) {
                jj_scanpos=token34;
                if (jj_3R_45()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(UNPARSED_TEXT_NO_SINGLE_QUOTES)) return true;
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_47()) return true;
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_3R_48()) return true;
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_scan_token(EL_EXPRESSION_IN_ATTRIBUTE)) return true;
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_scan_token(VALUE_BINDING_IN_ATTRIBUTE)) return true;
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_scan_token(JSP_EXPRESSION_IN_ATTRIBUTE)) return true;
        return false;
    }

}
