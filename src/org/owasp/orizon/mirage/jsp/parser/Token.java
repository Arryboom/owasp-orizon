/* Generated by: FreeCC 0.9.3. Token.java */
package org.owasp.orizon.mirage.jsp.parser;

/**
 * Describes the input token stream.
 */
public class Token implements Node,JspConstants {
    private Node parent;
    private String inputSource="";
    private java.util.Map<String,Object>attributes;
    /**
     * An integer that describes the kind of this token.  This numbering
     * system is determined by JavaCCParser, and a table of these numbers is
     * stored in the file ...Constants.java.
     */
    int kind;
    /**
     * beginLine and beginColumn describe the position of the first character
     * of this token; endLine and endColumn describe the position of the
     * last character of this token.
     */
    int beginLine,beginColumn,endLine,endColumn;
    /**
     * The string image of the token.
     */
    String image;
    /**
     * A reference to the next regular (non-special) token from the input
     * stream.  If this is the last token from the input stream, or if the
     * token manager has not read tokens beyond this one, this field is
     * set to null.  This is true only if this token is also a regular
     * token.  Otherwise, see below for a description of the contents of
     * this field.
     */
    Token next;
    /**
     * This field is used to access special tokens that occur prior to this
     * token, but after the immediately preceding regular (non-special) token.
     * If there are no such special tokens, this field is set to null.
     * When there are more than one such special token, this field refers
     * to the last of these special tokens, which in turn refers to the next
     * previous special token through its specialToken field, and so on
     * until the first special token (whose specialToken field is null).
     * The next fields of special tokens refer to other special tokens that
     * immediately follow it (without an intervening regular token).  If there
     * is no such token, this field is null.
     */
    Token specialToken;
    private boolean unparsed;
    /**
     * No-argument constructor
     */
    public Token() {
    }

    /**
     * Constructs a new token for the specified Image.
     */
    public Token(int kind) {
        this(kind,null);
    }

    /**
     * Constructs a new token for the specified Image and Kind.
     */
    public Token(int kind,String image) {
        this.kind=kind;
        this.image=image;
    }

    public int getId() {
        return kind;
    }

    public String getNormalizedText() {
        return image;
    }

    public String getRawText() {
        return image;
    }

    public String toString() {
        return getNormalizedText();
    }

    public Object getAttribute(String name) {
        return attributes==null?null:
        attributes.get(name);
    }

    public void setAttribute(String name,Object value) {
        if (attributes==null) {
            attributes=new java.util.HashMap<String,Object>();
        }
        attributes.put(name,value);
    }

    public boolean hasAttribute(String name) {
        return attributes==null?false:
        attributes.containsKey(name);
    }

    public java.util.Set<String>getAttributeNames() {
        if (attributes==null) return java.util.Collections.emptySet();
        return attributes.keySet();
    }

    public static Token newToken(int ofKind,String image) {
        switch(ofKind) {
            case TAG_START:
            return new TAG_START(ofKind,image);
            case ENDTAG_START:
            return new ENDTAG_START(ofKind,image);
            case COMMENT_START:
            return new COMMENT_START(ofKind,image);
            case DECL_START:
            return new DECL_START(ofKind,image);
            case DOCTYPE_DECL_START:
            return new DOCTYPE_DECL_START(ofKind,image);
            case CDATA_START:
            return new CDATA_START(ofKind,image);
            case JSP_COMMENT_START:
            return new JSP_COMMENT_START(ofKind,image);
            case JSP_DECLARATION_START:
            return new JSP_DECLARATION_START(ofKind,image);
            case JSP_EXPRESSION_START:
            return new JSP_EXPRESSION_START(ofKind,image);
            case JSP_SCRIPTLET_START:
            return new JSP_SCRIPTLET_START(ofKind,image);
            case JSP_DIRECTIVE_START:
            return new JSP_DIRECTIVE_START(ofKind,image);
            case EL_EXPRESSION:
            return new EL_EXPRESSION(ofKind,image);
            case UNPARSED_TEXT:
            return new UNPARSED_TEXT(ofKind,image);
            case JSP_DIRECTIVE_NAME:
            return new JSP_DIRECTIVE_NAME(ofKind,image);
            case JSP_DIRECTIVE_ATTRIBUTE_NAME:
            return new JSP_DIRECTIVE_ATTRIBUTE_NAME(ofKind,image);
            case JSP_DIRECTIVE_ATTRIBUTE_EQUALS:
            return new JSP_DIRECTIVE_ATTRIBUTE_EQUALS(ofKind,image);
            case JSP_DIRECTIVE_ATTRIBUTE_VALUE:
            return new JSP_DIRECTIVE_ATTRIBUTE_VALUE(ofKind,image);
            case JSP_DIRECTIVE_END:
            return new JSP_DIRECTIVE_END(ofKind,image);
            case JSP_SCRIPTLET_END:
            return new JSP_SCRIPTLET_END(ofKind,image);
            case JSP_SCRIPTLET:
            return new JSP_SCRIPTLET(ofKind,image);
            case JSP_EXPRESSION_END:
            return new JSP_EXPRESSION_END(ofKind,image);
            case JSP_EXPRESSION:
            return new JSP_EXPRESSION(ofKind,image);
            case JSP_DECLARATION_END:
            return new JSP_DECLARATION_END(ofKind,image);
            case JSP_DECLARATION:
            return new JSP_DECLARATION(ofKind,image);
            case JSP_COMMENT_END:
            return new JSP_COMMENT_END(ofKind,image);
            case JSP_COMMENT_CONTENT:
            return new JSP_COMMENT_CONTENT(ofKind,image);
            case WHITESPACES:
            return new WHITESPACES(ofKind,image);
            case NAME:
            return new NAME(ofKind,image);
            case PUBLIC:
            return new PUBLIC(ofKind,image);
            case SYSTEM:
            return new SYSTEM(ofKind,image);
            case DOCTYPE_DECL_END:
            return new DOCTYPE_DECL_END(ofKind,image);
            case QUOTED_LITERAL:
            return new QUOTED_LITERAL(ofKind,image);
            case UNPARSED:
            return new UNPARSED(ofKind,image);
            case CDATA_END:
            return new CDATA_END(ofKind,image);
            case TAG_NAME:
            return new TAG_NAME(ofKind,image);
            case LST_ERROR:
            return new LST_ERROR(ofKind,image);
            case ATTR_NAME:
            return new ATTR_NAME(ofKind,image);
            case TAG_END:
            return new TAG_END(ofKind,image);
            case DECL_END:
            return new DECL_END(ofKind,image);
            case TAG_SLASHEND:
            return new TAG_SLASHEND(ofKind,image);
            case ATTR_EQ:
            return new ATTR_EQ(ofKind,image);
            case IN_TAG_ERROR:
            return new IN_TAG_ERROR(ofKind,image);
            case SINGLE_QUOTE:
            return new SINGLE_QUOTE(ofKind,image);
            case DOUBLE_QUOTE:
            return new DOUBLE_QUOTE(ofKind,image);
            case EL_EXPRESSION_IN_ATTRIBUTE:
            return new EL_EXPRESSION_IN_ATTRIBUTE(ofKind,image);
            case VALUE_BINDING_IN_ATTRIBUTE:
            return new VALUE_BINDING_IN_ATTRIBUTE(ofKind,image);
            case JSP_EXPRESSION_IN_ATTRIBUTE:
            return new JSP_EXPRESSION_IN_ATTRIBUTE(ofKind,image);
            case ENDING_SINGLE_QUOTE:
            return new ENDING_SINGLE_QUOTE(ofKind,image);
            case UNPARSED_TEXT_NO_SINGLE_QUOTES:
            return new UNPARSED_TEXT_NO_SINGLE_QUOTES(ofKind,image);
            case DOLLAR_OR_HASH_SINGLE_QUOTE:
            return new DOLLAR_OR_HASH_SINGLE_QUOTE(ofKind,image);
            case ENDING_DOUBLE_QUOTE:
            return new ENDING_DOUBLE_QUOTE(ofKind,image);
            case UNPARSED_TEXT_NO_DOUBLE_QUOTES:
            return new UNPARSED_TEXT_NO_DOUBLE_QUOTES(ofKind,image);
            case DOLLAR_OR_HASH_DOUBLE_QUOTE:
            return new DOLLAR_OR_HASH_DOUBLE_QUOTE(ofKind,image);
            case COMMENT_END:
            return new COMMENT_END(ofKind,image);
            case COMMENT_TEXT:
            return new COMMENT_TEXT(ofKind,image);
        }
        return new Token(ofKind,image);
    }

    public void setInputSource(String inputSource) {
        this.inputSource=inputSource;
    }

    public String getInputSource() {
        return inputSource;
    }

    public void setBeginColumn(int beginColumn) {
        this.beginColumn=beginColumn;
    }

    public void setEndColumn(int endColumn) {
        this.endColumn=endColumn;
    }

    public void setBeginLine(int beginLine) {
        this.beginLine=beginLine;
    }

    public void setEndLine(int endLine) {
        this.endLine=endLine;
    }

    public int getBeginLine() {
        return beginLine;
    }

    public int getBeginColumn() {
        return beginColumn;
    }

    public int getEndLine() {
        return endLine;
    }

    public int getEndColumn() {
        return endColumn;
    }

    public int getChildCount() {
        return 0;
    }

    public Node getChild(int i) {
        return null;
    }

    public void setChild(int i,Node n) {
        throw new UnsupportedOperationException();
    }

    public void addChild(Node n) {
        throw new UnsupportedOperationException();
    }

    public void addChild(int i,Node n) {
        throw new UnsupportedOperationException();
    }

    public Node removeChild(int i) {
        throw new UnsupportedOperationException();
    }

    public boolean removeChild(Node n) {
        return false;
    }

    public int indexOf(Node n) {
        return-1;
    }

    public boolean isUnparsed() {
        return unparsed;
    }

    public void setUnparsed(boolean unparsed) {
        this.unparsed=unparsed;
    }

    public void clearChildren() {
    }

    public Node getParent() {
        return parent;
    }

    public void setParent(Node parent) {
        this.parent=parent;
    }

    public void open() {
    }

    public void close() {
    }

}
